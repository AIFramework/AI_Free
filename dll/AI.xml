<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AI</name>
    </assembly>
    <members>
        <member name="T:AI.AISetting">
            <summary>
            Global settings
            </summary>
        </member>
        <member name="P:AI.AISetting.GlobalEps">
            <summary>
            Global epsilon (default = 1e-8)
            </summary>
        </member>
        <member name="M:AI.AISetting.GetProvider">
            <summary>
            Get a provider for a dot as decimal separator conversion 
            </summary>
        </member>
        <member name="M:AI.AISetting.GetProviderComa">
            <summary>
            Get a comma conversion provider
            </summary>
        </member>
        <member name="T:AI.Algebra.Gauss">
            <summary>
            Gauss method has computational complexity O(n^3)
            </summary>
        </member>
        <member name="M:AI.Algebra.Gauss.SolvingEquations(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Solve the SLAE
            </summary>
            <param name="A">Coefficient matrix</param>
            <param name="B">Free members vector</param>
        </member>
        <member name="T:AI.Algebra.Kramer">
            <summary>
            Cramer method
            </summary>
        </member>
        <member name="M:AI.Algebra.Kramer.SolvingEquations(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Solve the SLAE
            </summary>
            <param name="A">Coefficient matrix</param>
            <param name="B">Free members vector</param>
        </member>
        <member name="T:AI.Charts.ChartData">
            <summary>
            Данные графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartData.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="M:AI.Charts.ChartData.SempleADD(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.Charts.Description,System.Drawing.Color,AI.Charts.ChartType)">
            <summary>
            Добавление графика
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="description"></param>
            <param name="color"></param>
            <param name="chartType"></param>
        </member>
        <member name="T:AI.Charts.ChartDataSemple">
            <summary>
            Описание одной части графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.DescriptionData">
            <summary>
            Описание (метаданные)
            </summary>
        </member>
        <member name="F:AI.Charts.ChartDataSemple.DataX">
            <summary>
            Данные по оси X
            </summary>
        </member>
        <member name="F:AI.Charts.ChartDataSemple.DataY">
            <summary>
            Данные по Y
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.ColorChart">
            <summary>
            Цвет графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.ChartType">
            <summary>
            Тип графика
            </summary>
        </member>
        <member name="M:AI.Charts.ChartDataSemple.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.Charts.Description,System.Drawing.Color,AI.Charts.ChartType)">
            <summary>
            Данные графика
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="description"></param>
            <param name="color"></param>
            <param name="chartType"></param>
        </member>
        <member name="T:AI.Charts.ChartType">
            <summary>
            Доступные типы графиков
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Plot">
            <summary>
            График в виде линии 
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Bar">
            <summary>
            График в виде столбцов(гистограмма)
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Scatter">
            <summary>
            Скаттерограмма, график в виде точек
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Spline">
            <summary>
            Сплайновая кривая 
            </summary>
        </member>
        <member name="T:AI.Charts.Control.ChartSempl">
            <summary>
            Данные графика
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartSempl.Data">
            <summary>
            Ось X
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartSempl.Steps">
            <summary>
            Ось Y
            </summary>
        </member>
        <member name="F:AI.Charts.Control.ChartSempl.tableOfContentsOfX">
            <summary>
            Ускоренный поиск регионов
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempl.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Данные графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempl.GetMaxData">
            <summary>
            Максимум по оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempl.GetMaxSteps">
            <summary>
            Максимум по оси X
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempl.GetMinData">
            <summary>
            Минимум по оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempl.GetMinSteps">
            <summary>
            Минимум по оси X
            </summary>
        </member>
        <member name="T:AI.Charts.Control.ChartSempls">
            <summary>
            Коллекция
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.#ctor">
            <summary>
            Коллеция данных графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.Add(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Добавление данных
            </summary>
            <param name="x">Вектор x</param>
            <param name="y">Вектор y</param>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.GetMaxData">
            <summary>
            Максимум по оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.GetMaxSteps">
            <summary>
            Максимум по оси X
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.GetMinData">
            <summary>
            Минимум по оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartSempls.GetMinSteps">
            <summary>
            Минимум по оси X
            </summary>
        </member>
        <member name="T:AI.Charts.Control.ChartVisual">
            <summary>
            Визуально представление данных (Графики)
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.IsMoove">
            <summary>
            Можно ли перемещать график
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.IsScale">
            <summary>
            Можно ли масштабировать
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.IsShowXY">
            <summary>
            Выводить ли значения x,y
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.IsContextMenu">
            <summary>
            Использовать ли контекстное меню
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.LabelX">
            <summary>
            Имя оси X
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.LabelY">
            <summary>
            Имя оси Y
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.IsLogScale">
            <summary>
            График в логарифмическом масштабе
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.#ctor">
            <summary>
            Графики
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.VisualData(AI.Charts.ChartData)">
            <summary>
            Визуализация графиков
            </summary>
            <param name="chartDatas">Данные графиков</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddPlotBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.PlotBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.PlotComplex(AI.DataStructs.Algebraic.Vector,AI.ComplexVector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddPlotBlack(AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.PlotBlack(AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.PlotComplex(AI.ComplexVector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddRadialPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddRadialDegPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.RadPlotBlueDeg(AI.DataStructs.Algebraic.Vector,System.String,System.Int32)">
            <summary>
            Радиальный график
            </summary>
            <param name="y"></param>
            <param name="name"></param>
            <param name="width"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddBar(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddBarBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddBarBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.BarBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.BarBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatter(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatterMark3(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatterMark6(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatterBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatterBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ScatterBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ScatterBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ScatterComplex(AI.ComplexVector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ScatterComplexPlane(AI.ComplexVector,System.String,System.String,System.String)">
            <summary>
            Создание скаттерограммы отражающей комплексную плоскость
            </summary>
            <param name="y">Комплексный вектор</param>
            <param name="name">Имя</param>
            <param name="xScale">Единица измерения шкалы x</param>
            <param name="yScale">Единица измерения шкалы y</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ScatterComplexPlaneWithRing1(AI.ComplexVector,System.String,System.String,System.String)">
            <summary>
            Создание скаттерограммы отражающей комплексную плоскость
            </summary>
            <param name="y">Комплексный вектор</param>
            <param name="name">Имя</param>
            <param name="xScale">Единица измерения шкалы x</param>
            <param name="yScale">Единица измерения шкалы y</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ChartImg">
            <summary>
             Отрисовка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.Clear">
            <summary>
            Очистка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AutoScale">
            <summary>
            Масштабирование по умолчанию
            </summary>
        </member>
        <member name="F:AI.Charts.Control.ChartVisual.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Charts.Control.HeatMapControl">
            <summary>
            Тепловая карта
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.#ctor">
            <summary>
            Тепловая карта
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.NewGrad">
            <summary>
            Задает градиент тепловой карты
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.GetColor(System.Double)">
            <summary>
            Получение цвета из значения 
            </summary>
            <param name="value">значение</param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.HeatMap_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Удержание позиций меток
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Преобразование изображения
            Источник: https://stackoverflow.com/questions/1922040/how-to-resize-an-image-c-sharp/24199315
            </summary>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.CalculateHeatMap(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Расчет тепловой карты для матрицы
            </summary>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.CalculateHeatMap(System.Double[0:,0:])">
            <summary>
            Расчет тепловой карты для двумерного массива
            </summary>
            <param name="data">Массив</param>
        </member>
        <member name="F:AI.Charts.Control.HeatMapControl.components">
            <summary> 
            Обязательная переменная конструктора.
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.Dispose(System.Boolean)">
            <summary> 
            Освободить все используемые ресурсы.
            </summary>
            <param name="disposing">истинно, если управляемый ресурс должен быть удален; иначе ложно.</param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.InitializeComponent">
            <summary> 
            Требуемый метод для поддержки конструктора — не изменяйте 
            содержимое этого метода с помощью редактора кода.
            </summary>
        </member>
        <member name="T:AI.Charts.Data.DataMethods">
            <summary>
            Description of DataMethods.
            </summary>
        </member>
        <member name="M:AI.Charts.Data.DataMethods.ReducDataPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прореживание данных, чтобы на графике не было большого числа точек
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Data.DataMethods.ReducDataRadialPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прореживание данных, чтобы на графике не было большого числа точек
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Data.DataMethods.ReducData40000(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прореживание данных, чтобы на графике не было большого числа точек
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Data.DataMethods.ImageFromChart(System.Windows.Forms.DataVisualization.Charting.Chart)">
            <summary>
            Получение изображения графика 
            </summary>
            <param name="chart">График</param>
        </member>
        <member name="M:AI.Charts.Data.DataMethods.GetColorForStyle(System.String)">
            <summary>
            Получение среднего цвета из картинки
            </summary>
            <param name="path">Путь до картинки</param>
        </member>
        <member name="T:AI.Charts.Description">
            <summary>
            Описание для графика
            </summary>
        </member>
        <member name="F:AI.Charts.Description.X">
            <summary>
            Название оси X
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Y">
            <summary>
            Название оси Y
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Name">
            <summary>
            Название графика
            </summary>
        </member>
        <member name="P:AI.Charts.Description.Descript">
            <summary>
            Описание графика
            </summary>
        </member>
        <member name="M:AI.Charts.Description.#ctor(System.String,System.String,System.String)">
            <summary>
            Описание графика
            </summary>
            <param name="xL">Название оси X</param>
            <param name="yL">Название оси Y</param>
            <param name="name">Название графика</param>
        </member>
        <member name="T:AI.Charts.Forms.FormChart">
            <summary>
            Форма для отображения графиков
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.#ctor">
            <summary>
            Форма для отображения графиков
            </summary>
        </member>
        <member name="P:AI.Charts.Forms.FormChart.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="P:AI.Charts.Forms.FormChart.LabelX">
            <summary>
            Имя оси X
            </summary>
        </member>
        <member name="P:AI.Charts.Forms.FormChart.LabelY">
            <summary>
            Имя оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.VisualData(AI.Charts.ChartData)">
            <summary>
            Визуализация графиков
            </summary>
            <param name="chartDatas">Данные графиков</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddPlot(AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddPlotBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.PlotBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.PlotComplex(AI.DataStructs.Algebraic.Vector,AI.ComplexVector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddPlotBlack(AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.PlotBlack(AI.DataStructs.Algebraic.Vector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.PlotComplex(AI.ComplexVector,System.String,System.Int32,System.Boolean)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddRadialPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddRadialDegPlot(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.RadPlotBlueDeg(AI.DataStructs.Algebraic.Vector,System.String,System.Int32)">
            <summary>
            Радиальный график
            </summary>
            <param name="y"></param>
            <param name="name"></param>
            <param name="width"></param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddBar(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddBarBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddBarBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.BarBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.BarBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddScatter(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddScatterBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddScatterBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.ScatterBlack(AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.ScatterBlack(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.ScatterComplex(AI.ComplexVector,System.String)">
            <summary>
            Создание скаттерограммы с данными
            </summary>
            <param name="y"></param>
            <param name="name"></param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.ScatterComplexPlane(AI.ComplexVector,System.String,System.String,System.String)">
            <summary>
            Создание скаттерограммы отражающей комплексную плоскость
            </summary>
            <param name="y">Комплексный вектор</param>
            <param name="name">Имя</param>
            <param name="xScale">Единица измерения шкалы x</param>
            <param name="yScale">Единица измерения шкалы y</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.Clear">
            <summary>
            Очищение графика
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddSpectrum(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Drawing.Color,System.String)">
            <summary>
            Добавление амплитудного спектра (окно Ханна)
            </summary>
            <param name="x">Вектор времени</param>
            <param name="y">Вектор амплитуд</param>
            <param name="color">Цвет</param>
            <param name="name">Имя графика</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddSpectrum(AI.Charts.ChartElements.IChartElement)">
            <summary>
            Добавление амплитудного спектра (окно Ханна)
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddDiff(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Drawing.Color,System.String,System.Int32)">
            <summary>
            Производная
            </summary>
            <param name="x">Вектор времени</param>
            <param name="y">Вектор амплитуд</param>
            <param name="color">Цвет</param>
            <param name="name">Имя графика</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddIntegr(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Drawing.Color,System.String,System.Int32)">
            <summary>
            Интеграл
            </summary>
            <param name="x">Вектор времени</param>
            <param name="y">Вектор амплитуд</param>
            <param name="color">Цвет</param>
            <param name="name">Имя графика</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.AddHistoramm(AI.DataStructs.Algebraic.Vector,System.Drawing.Color,System.String)">
            <summary>
            Гистограммы
            </summary>
            <param name="y">Вектор значений</param>
            <param name="color">Цвет</param>
            <param name="name">Имя</param>
        </member>
        <member name="F:AI.Charts.Forms.FormChart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.Forms.FormChart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AI.Combinatorics.CombinatoricsBaseFunction">
            <summary>
            Базовые функции коммбинарики
            </summary>
        </member>
        <member name="M:AI.Combinatorics.CombinatoricsBaseFunction.PlacingWithoutRepetition(System.Int32,System.Int32)">
            <summary>
            Размещение без повторов
            </summary>
            <param name="k">Количество элементов</param>
            <param name="n">Количество возможных позиций</param>
        </member>
        <member name="M:AI.Combinatorics.CombinatoricsBaseFunction.NumberOfCombinations(System.Int32,System.Int32)">
            <summary>
            Количество комбинаций
            </summary>
            <param name="k">Количество элементов</param>
            <param name="n">Количество возможных позиций</param>
        </member>
        <member name="T:AI.ComplexVector">
            <summary>
            The class implements work with vectors of complex numbers
            </summary>
        </member>
        <member name="M:AI.ComplexVector.op_Implicit(AI.ComplexVector)~System.Numerics.Complex[]">
            <summary>
            Casting to a Complex array
            </summary>
            <param name="vect">Vector</param>
        </member>
        <member name="M:AI.ComplexVector.op_Implicit(System.Numerics.Complex[])~AI.ComplexVector">
            <summary>
            Casting a Complex array to a vector
            </summary>
            <param name="dbs">Complex array</param>
        </member>
        <member name="M:AI.ComplexVector.op_Implicit(System.Double[])~AI.ComplexVector">
            <summary>
            Casting a double array to a vector
            </summary>
            <param name="dbs">Double array</param>
        </member>
        <member name="M:AI.ComplexVector.op_Implicit(AI.DataStructs.Algebraic.Vector)~AI.ComplexVector">
            <summary>
            
            </summary>
            <param name="dbs"></param>
        </member>
        <member name="P:AI.ComplexVector.Data">
            <summary>
            Complex array containing vector samples
            </summary>
        </member>
        <member name="P:AI.ComplexVector.Count">
            <summary>
            Complex vector dimension
            </summary>
        </member>
        <member name="P:AI.ComplexVector.Item(System.Int32)">
            <summary>
            Accessing an item by index
            </summary>
            <param name="i">Index</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor">
            <summary>
            Creates a vector with zeros (0 + 0j) of dimension 3
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Int32)">
            <summary>
            Creates a vector with zeros (0 + 0j) of dimension n
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Creates a vector from an array
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates a vector based on arrays of real and imaginary parts
            </summary>
            <param name="vectorReal">Real part</param>
            <param name="vectorImg">Imaginary part</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Creates a vector based on arrays of real and imaginary parts
            </summary>
            <param name="vectorReal">Real part</param>
            <param name="vectorImg">Imaginary part</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Creates a vector based on vectors of real part, imaginary filled with zeros
            </summary>
            <param name="vectorReal">Real part</param>
        </member>
        <member name="M:AI.ComplexVector.CutAndZero(System.Int32)">
            <summary>
            Zero padding or cropping to the desired vector size.
            </summary>
            <param name="n">New dimension</param>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное сложение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Double,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_UnaryNegation(AI.ComplexVector)">
            <summary>
            Отрицание
            </summary>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное вычитание
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Double,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">реальное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Double)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k"> число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Умножение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.DataStructs.Algebraic.Vector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Multiplication by a number
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное деление
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.Copy">
            <summary>
            Vector copy
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Revers">
            <summary>
            Vector reverse (mirror image)
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Shift(System.Int32)">
            <summary>
             Shift the sequence by a certain number.Example: the sequence 1 2 3 is shifted by 2 - this is {0 0 1 2 3}, by 4 - {0 0 0 0 1 2 3}
            </summary>
            <param name="valueShift">Shift amount</param>
        </member>
        <member name="M:AI.ComplexVector.FurCentr">
            <summary>
            Centering an array of values ​​obtained by the Fourier transform
            </summary>
        </member>
        <member name="M:AI.ComplexVector.ImgToVector">
            <summary>
            Returns the vector of the imaginary part of a complex vector
            </summary>
        </member>
        <member name="M:AI.ComplexVector.RealToVector">
            <summary>
            Returns the vector of the real part of a complex vector
            </summary>
        </member>
        <member name="M:AI.ComplexVector.PhaseToVector">
            <summary>
            Returns the phase vector of a complex vector
            </summary>
        </member>
        <member name="M:AI.ComplexVector.MagnitudeToVector">
            <summary>
            Returns the modulus vector of a complex vector
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Decimation(System.Int32)">
            <summary>
            Decimation (thinning) vector
            </summary>
            <param name="kDecim">Decimation factor</param>
        </member>
        <member name="M:AI.ComplexVector.AddSimmetr">
            <summary>
            Adding a reflected Vector
            </summary>
        </member>
        <member name="M:AI.ComplexVector.InterpolayrZero(System.Int32)">
            <summary>
            Interpolation by a polynomial of order zero
            </summary>
            <param name="kInterp">Interpolation factor</param>
        </member>
        <member name="M:AI.ComplexVector.ToList">
            <summary>
            Convert vector to list
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Transform(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Element-wise vector transformation
            </summary>
            <param name="func">Conversion function</param>
        </member>
        <member name="M:AI.ComplexVector.TransformSelf(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Element-wise vector transformation
            </summary>
            <param name="func">Conversion function</param>
        </member>
        <member name="M:AI.ComplexVector.ComplexConjugate">
            <summary>
            Complex conjugate number
            </summary>
        </member>
        <member name="M:AI.ComplexVector.ComplexConjugateSelf">
            <summary>
            Complex conjugate number
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Save(System.String)">
            <summary>
            Saving a complex vector
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ComplexVector.Open(System.String)">
            <summary>
            Loading a complex vector
            </summary>
            <param name="path">File path</param>	
        </member>
        <member name="M:AI.ComplexVector.ComplexVectorPhaseMagn(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Converting the vector of phases and amplitudes into a complex vector
            </summary>
            <param name="magn">Amplitude vector</param>
            <param name="phase"> Phase vector(rad)</param>
        </member>
        <member name="M:AI.ComplexVector.ComplexVectorPhaseDegMagnDb(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.DbType)">
            <summary>
            Converting the vector of phases and amplitudes into a complex vector
            </summary>
            <param name="magnDb">Amplitude vector(db)</param>
            <param name="phaseDeg"> Phase vector(deg)</param>
            <param name="dbType">Тип дб по энергия/амплитуда</param>
        </member>
        <member name="M:AI.ComplexVector.TransformVectorX(AI.DataStructs.Algebraic.Vector,System.Func{System.Double,System.Numerics.Complex})">
            <summary>
            Vector transformation(A vector of real arguments is used)
            </summary>
            <param name="transformFunc">Conversion function, a function of the value of a vector of arguments</param>
            <param name="x">Argument vector</param>
        </member>
        <member name="M:AI.ComplexVector.TransformVectorX(AI.ComplexVector,System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Vector transformation(Using a vector of complex arguments)
            </summary>
            <param name="transformFunc"> Conversion function, a function of the value of a vector of arguments</param>
            <param name="x">Argument vector</param>
        </member>
        <member name="M:AI.ComplexVector.Mean">
            <summary>
            Arithmetic mean of a complex vector
            </summary>
        </member>
        <member name="T:AI.DbType">
            <summary>
            Decibel type
            </summary>
        </member>
        <member name="F:AI.DbType.Energy">
            <summary>
            Energetic
            </summary>
        </member>
        <member name="F:AI.DbType.Ampl">
            <summary>
            Amplitude
            </summary>
        </member>
        <member name="T:AI.ComputerVision.BinaryImg">
            <summary>
            Description of BinaryImg.
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.M">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.Count">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.Item(System.Int32,System.Int32)">
            <summary>
            Вывод индекса
            </summary>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.#ctor(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Бинарное изображение
            </summary>
            <param name="matr">Матрица серого</param>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.#ctor(System.Drawing.Bitmap)">
            <summary>
            Бинарное изображение
            </summary>
            <param name="bm">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.ToMatrixInvers">
            <summary>
            Бинарное в матрицу
            </summary>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.ToBmp">
            <summary>
            Бинарное в Bitmap
            </summary>
        </member>
        <member name="T:AI.ComputerVision.CalculateBinaryEl">
            <summary>
            Подсчет объектов
            </summary>
        </member>
        <member name="F:AI.ComputerVision.CalculateBinaryEl.img">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.#ctor">
            <summary>
            Подсчет объектов
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.CalculateBinElements(System.Drawing.Bitmap)">
            <summary>
            Подсчет объектов
            </summary>
            <param name="bmp">Изображение</param>
            <returns>Кол-во объектов</returns>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.FilterI(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по фильтрам внутренних углов, с подсчетом углов
            </summary>
            <param name="dx">Смещение по x</param>
            <param name="dy">Смещение по y</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.FilterE(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по фильтрам внешних углов, с подсчетом углов
            </summary>
            <param name="dx">Смещение по x</param>
            <param name="dy">Смещение по y</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.Filter(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по внешним и внутренним углам
            </summary>
            <param name="dx">Смещение х</param>
            <param name="dy">Смещение у</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.Mascs">
            <summary>
            Создание масок для фильтров внеш. и внутр. углов
            </summary>
        </member>
        <member name="T:AI.ComputerVision.CompImg">
            <summary>
            Сравнение изображений
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CompImg.GetVectorFromImg(System.Drawing.Bitmap)">
            <summary>
            Получение вектора из изображения
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CompImg.GetVectorFromImg(System.Drawing.Bitmap,System.String)">
            <summary>
            Получение вектора из изображения
            </summary>
            <param name="bitmap"></param>
            <param name="pathNorm"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.CompImg.GetVectorFromImgI(System.Drawing.Bitmap,System.String)">
            <summary>
            Получение вектора из изображения
            </summary>
            <param name="bitmap"></param>
            <param name="pathNorm"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.CompImg.GetVectorFromPath(System.String)">
            <summary>
            Получение вектора из изображения
            </summary>
            <param name="path">Путь до изображения</param>
        </member>
        <member name="M:AI.ComputerVision.CompImg.SaveMeanStdVect(System.String,System.String)">
            <summary>
            Сохраняет ско и средний вектор
            </summary>
            <param name="path2fold">Путь до папки с картинками</param>
            <param name="pathSave">Путь до сохранения</param>
        </member>
        <member name="T:AI.ComputerVision.FeaturesInBinaryImg">
            <summary>
            Description of FeaturesInBinaryImg.
            </summary>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Фичи из матрицы изобр
            </summary>
            <param name="isRot">Сохранить оригенальный поворот</param>
            <param name="isScale">Сохранить оригенальный масштаб</param>
            <param name="isMove">Сохранить оригенальное смещение</param>
            <param name="nGarm">Количество гармоник, кол-во точек в 2 раза больше</param>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.MatrixFeatures(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Генерация вектора частотных признаков из матрицы изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <returns>Коэф. ряда фурье после преобразований</returns>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.KepstrFeatures(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Кепстральные коэффициенты
            </summary>
            <param name="img">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.GetPoints(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Выдает точки
            </summary>
            <param name="img">Матрица серого изображения</param>
        </member>
        <member name="T:AI.ComputerVision.ImgFilters">
            <summary>
            Filters for images
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.SpatialFilter(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Spatial grayscale filter
            </summary>
            <param name="img">Image matrix</param>
            <param name="filter">Filter matrix</param>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.MedianFilter(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Median grayscale filter
            </summary>
            <param name="img">Image matrix</param>
            <param name="filter">Filter matrix</param>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.StdFilter(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            std grayscale filter
            </summary>
            <param name="img">Image matrix</param>
            <param name="filter">Filter matrix</param>
        </member>
        <member name="T:AI.ComputerVision.ImgConverter">
            <summary>
            Конвертирование изображений
            в разные математические типы
            и обратно
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.GetBitmap(System.String)">
            <summary>
            Загрузка картинки
            </summary>
            <param name="path">Имя</param>
            <returns>изображение</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ImgToByteArray(System.Drawing.Bitmap)">
            <summary>
            Получение массива байт, для сохранения или передачи по сети
            </summary>
            <param name="bitmap">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToTensor(System.Drawing.Bitmap)">
            <summary>
            Преобразование изображения в тензор 3-го ранга(нормировка на 1)
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatr(System.Drawing.Bitmap)">
            <summary>
            Изображение в полутоновую матрицу
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrBlue(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу синего канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrGreen(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу зеленого канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrRed(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу красного канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToHMatr(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в матрицу H компонент
            H принадлежит интервалу [0,1]
            </summary>
            <param name="Bmp">Картинка</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.RotateBitmap(System.Drawing.Bitmap,System.Single)">
            <summary>
            Поворот изображения на заданный угол
            </summary>
            <param name="bmp">Исходное изображение</param>
            <param name="angleRotate">Угол поворота</param>
            <returns>Изображение повернутое на заданный угол</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.VerticalReflectionBitmap(System.Drawing.Bitmap)">
            <summary>
            Вертикальное зеркальное отображение
            </summary>
            <param name="bmp">Изображение</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.HorizontalReflectionBitmap(System.Drawing.Bitmap)">
            <summary>
            Горизонтальное зеркальное отображение
            </summary>
            <param name="bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeW(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания ширины
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newW">Новая ширина</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeH(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания высоты
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newH">Новая высота</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeM(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания размера максимальной стороны
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newM">Размер максимальной стороны</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.HComponent(System.Drawing.Color)">
            <summary>
            Вычисление H компоненты
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.Visualization(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Визуализация матрицы
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ToBitmap(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Перевод матрицы в полутоновое изображение
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ToBitmap(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Тензор в картинку
            </summary>
            <param name="tensor">Тензор</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:AI.ComputerVision.SpatialFilters.ISpatialFilterGray">
            <summary>
            Grayscale spatial filter interface
            </summary>
        </member>
        <member name="T:AI.ComputerVision.UInt8.ConvolutionUInt16">
            <summary>
            Свертка изображений UInt8
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ConvolutionUInt16.Conv16Gray(AI.ComputerVision.UInt8.ImgUInt16Gray,AI.ComputerVision.UInt8.ImgUInt16Gray)">
            <summary>
            Свертка чб изобржений
            </summary>
            <param name="img"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ComputerVision.UInt8.ImgUInt16Gray">
            <summary>
            Изображение серое UInt16
            </summary>
        </member>
        <member name="F:AI.ComputerVision.UInt8.ImgUInt16Gray.img">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="F:AI.ComputerVision.UInt8.ImgUInt16Gray.Width">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="F:AI.ComputerVision.UInt8.ImgUInt16Gray.Height">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.ComputerVision.UInt8.ImgUInt16Gray.Item(System.Int32,System.Int32)">
            <summary>
            Доступ к пикселам
            </summary>
            <param name="i">Index высоты</param>
            <param name="j">Index ширины</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.#ctor(System.Int32,System.Int32)">
            <summary>
            Создание черного изображения указанных размеров
            </summary>
            <param name="h"></param>
            <param name="w"></param>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.#ctor(System.Drawing.Bitmap)">
            <summary>
            Загрузка картинки(с переводом в чб)
            </summary>
            <param name="bitmap">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Addition(AI.ComputerVision.UInt8.ImgUInt16Gray,System.Int32)">
            <summary>
            Сумма
            </summary>
            <param name="img"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Subtraction(AI.ComputerVision.UInt8.ImgUInt16Gray,System.Int32)">
            <summary>
            Разность
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Addition(System.Int32,AI.ComputerVision.UInt8.ImgUInt16Gray)">
            <summary>
            Сумма
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Subtraction(System.Int32,AI.ComputerVision.UInt8.ImgUInt16Gray)">
            <summary>
            Разность
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Multiply(AI.ComputerVision.UInt8.ImgUInt16Gray,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Division(AI.ComputerVision.UInt8.ImgUInt16Gray,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Division(AI.ComputerVision.UInt8.ImgUInt16Gray,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Multiply(System.Double,AI.ComputerVision.UInt8.ImgUInt16Gray)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.op_Division(System.Double,AI.ComputerVision.UInt8.ImgUInt16Gray)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ComputerVision.UInt8.ImgUInt16Gray.ToBitmap">
            <summary>
            Перевод изображения в Bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ExtensionCV">
            <summary>
            Расширения для компьютерного зрения
            </summary>
        </member>
        <member name="M:AI.ExtensionCV.ToMatrix(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в матрицу
            </summary>
            <param name="bitmap">Картинка</param>
        </member>
        <member name="M:AI.ExtensionCV.ToMatrix(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Преобразование картинки в матрицу
            </summary>
            <param name="bitmap">Картинка</param>
            <param name="newW">Новая ширин</param>
            <param name="newH">Новая высота</param>
        </member>
        <member name="M:AI.ExtensionCV.ToTensor(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в тензор
            </summary>
            <param name="bitmap">Картинка</param>
        </member>
        <member name="M:AI.ExtensionCV.ToTensor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Преобразование картинки в тензор и изменение размера
            </summary>
            <param name="bitmap">Картинка</param>
            <param name="newW">Новая ширина</param>
            <param name="newH">Новая высота</param>
        </member>
        <member name="T:AI.Constants">
            <summary>
            Constants used in the framework
            </summary>
        </member>
        <member name="F:AI.Constants.SqrtPi">
            <summary>
            Square root of pi
            </summary>
        </member>
        <member name="F:AI.Constants.Sqrt2">
            <summary>
            Square root of two
            </summary>
        </member>
        <member name="F:AI.Constants.Minus2Pi">
            <summary>
            -2*pi
            </summary>
        </member>
        <member name="F:AI.Constants.TwoPi">
            <summary>
            2*pi
            </summary>
        </member>
        <member name="T:AI.Correlation">
            <summary>
            Класс реализует авто- и взаимо- кореляционные функции
            Для действительных и комплексных векторов
            </summary>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Cross-correlation of two real vectors
            </summary>
            <param name="A">First vector</param>
            <param name="B">Second vector</param>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Cross-correlation of two complex vectors
            </summary>
            <param name="A">First vector</param>
            <param name="B">Second vector</param>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Автокорелляция действительного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.ComplexVector)">
            <summary>
            Автокорелляция комплексного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>	
        </member>
        <member name="T:AI.DataLoader.VectorLoader">
            <summary>
            Class for loading vectors from different data types
            </summary>
        </member>
        <member name="P:AI.DataLoader.VectorLoader.Separator">
            <summary>
            Separator for numbers in a string
            </summary>
        </member>
        <member name="M:AI.DataLoader.VectorLoader.LoadVector(System.String,System.Int32,AI.DataLoader.VectorType)">
            <summary>
            Loading vectors from different data types
            </summary>
        </member>
        <member name="M:AI.DataLoader.VectorLoader.GetIntervals(System.Int32[],System.Int32[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Splitting vectors into intervals
            </summary>
        </member>
        <member name="M:AI.DataLoader.VectorLoader.GetTimeIntervals(System.Double[],System.Double[],System.Int32,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Splitting vectors into time intervals
            </summary>
        </member>
        <member name="T:AI.DataLoader.VectorType">
            <summary>
            Vector component data type
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.Wav">
            <summary>
            Uncompressed mono audio file
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.DoubleArray">
            <summary>
            Double array
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.FloatArray">
            <summary>
            Float array
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.IntArray">
            <summary>
            Int array
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.ByteArray">
            <summary>
            Byte array
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.String">
            <summary>
            A string in which numbers are located after a certain separator
            </summary>
        </member>
        <member name="F:AI.DataLoader.VectorType.Lines">
            <summary>
            A file in which each new line is a new one
            </summary>
        </member>
        <member name="T:AI.DataStructs.Algebraic.IAlgebraicStructure">
            <summary>
            Algebraic structure interface
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.IAlgebraicStructure.Item(System.Int32)">
            <summary>
            Element by index
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.IAlgebraicStructure.Count">
            <summary>
            Count of elements
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.IAlgebraicStructure.ToVector">
            <summary>
            Convert to vector
            </summary>
        </member>
        <member name="T:AI.DataStructs.Algebraic.Matrix">
            <summary>
            Класс реализующий матрицы и операции над ними
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.Data">
            <summary>
            Matrix elements
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.DataType">
            <summary>
            Тип матрицы
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.H">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.W">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.Count">
            <summary>
            Count of elements (M*N)
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.Item(System.Int32)">
            <summary>
            Matrix element
            </summary>
            <param name="i">index</param>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Matrix element
            </summary>
            <param name="i">H index</param>
            <param name="j">W index</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.#ctor">
            <summary>
            Создает матрицу со всеми нулями размерности 3х3
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Создает матрицу на основе двумерного массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает матрицу со всеми нулями размерности MxN
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Addition(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Addition of matrices 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Subtraction(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Difference of matrices
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Addition(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            Addition 
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Addition(System.Double,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Addition
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Subtraction(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Subtraction(System.Double,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            вычитание
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Multiply(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Division(AI.DataStructs.Algebraic.Matrix,System.Double)">
            	
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Division(System.Double,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Multiply(System.Double,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Multiply(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Multiply(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="B"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.op_Multiply(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Open(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">File path</param>		
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.NanToMean">
            <summary>
            Replacing uncertainty with mean
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.NanToValue(System.Double)">
            <summary>
            Replacing uncertainty with a number
            </summary>
            <param name="value">Число</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.NanToMeanOfFeatures(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Replacing uncertainty with mean значение по ансамблю в матрице
            </summary>
            <param name="matrices">Матрица</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.MatrixSpecialType">
            <summary>
            Распознавание специальных типов матриц
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetMinor(System.Int32,System.Int32)">
            <summary>
            Получение минора
            </summary>
            <param name="h">Без какой строки</param>
            <param name="w">Без какого столбца</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Invers">
            <summary>
            Вычисление обратной матрицы
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Min">
            <summary>
            Минимальное значение матрицы
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Max">
            <summary>
            Maximum value(Matrix)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Mean">
            <summary>
            Среднее арифметическое матрицы 
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Summ">
            <summary>
            Сумма 
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Dispersion">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Std">
            <summary>
            Среднеквадратичное отклонение
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.AdamarProduct(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Адамарово произведение(поэлементное)
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.MaxPool(System.Int32,System.Int32,System.Int32[0:,0:]@)">
            <summary>
            Макс пулинг
            </summary>
            <param name="poolH">step по высоте</param>
            <param name="poolW">step по ширине</param>
            <param name="indexPool">Максимальные индексы в исходной матрице</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToVector">
            <summary>
            Преобразование матрицы в вектор
            </summary>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Mul2VecFast(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение вектора-столбца на вектор строку, возвращается матрица результата
            </summary>
            <param name="ABinaryBip">Бинарный вектор</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Mul2Vec(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение вектора-столбца на вектор строку, возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Sum2Vec(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Сложение вектора-столбца на вектор строку по следующему правилу "matr[i, j] = B[j] + A[i];" возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Norm2Vec(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление нормы по след. правилу  matr[i, j] = Math.Sqrt(B[j]*B[j]+ A[i]*A[i]);, возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.MulMatrOnVectColumn(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение матрицы на вектор столбец
            </summary>
            <param name="vectCol">Вектор столбец</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.LikeVector">
            <summary>
             Представление матрицы как вектора
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GradientMatrixConvDelts(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Градиент свертки
            </summary>
            <param name="core"></param>
            <param name="delts"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Region(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Выделение региона
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Transpose">
            <summary>
            Транспонирование матрицы
            </summary>
            <returns>Возвращает транспонированную матрицу</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.TransformMatrix(System.Func{System.Double,System.Double})">
            <summary>
            Трансформирование матрицы
            </summary>
            <param name="transformFunc">Функция трансформации</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Pow(AI.DataStructs.Algebraic.Matrix,System.Int32)">
            <summary>
            Возведение матрицы в степень 
            путем матричного умножения на саму себя
            </summary>
            <param name="A">Входная матрица</param>
            <param name="exponent">Степень</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Copy">
            <summary>
            Копирование матрицы
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToString">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToStringFloat">
            <summary>
            Перевод в строку тип float
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToStringRound7">
            <summary>
            Сохранение и округление
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToString(System.String)">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
            <param name="sep">Разделитель горизонтальный</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetColumns(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Разложение матрицы на столбцы
            </summary>
            <param name="matr">Матрица</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Round(System.Int32)">
            <summary>
            Rounding значений
            </summary>
            <param name="n">До какого знака</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.SaveAsText(System.String)">
            <summary>
            Сохранение матрицы в виде текста
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.LoadFromText(System.String)">
            <summary>
            Загрузка матрицы из текстового файла
            </summary>
            <param name="path">Путь до текстового файла</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Save(System.String)">
            <summary>
            Сохранение матрицы
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.AlternativMatrix(System.Func{System.Double,System.Double}[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Альтернативная матрица
            </summary>
            <param name="functions">Функции</param>
            <param name="values">Значения</param>
            <returns>Возвращает альтернативную матрицу</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.OrtogonalMatrix(System.Func{System.Int32,System.Double,System.Double},AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Ортогональная матрица
            </summary>
            <param name="functions">Порождающая функция</param>
            <param name="values">Значения</param>
            <param name="count">Число выходов</param>
            <returns>Возвращает ортогональную матрицу</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Determinant">
            <summary>
            Расчет определителя матрицы
            </summary>
            <returns>Определитель</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.ToTriangularMatr">
            <summary>
            Переводит произвольную матрицу в треугольную
            </summary>
            <returns>Диагональная матрица</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetVector(System.Int32,System.Int32)">
            <summary>
            Возвращает вектор с нужного среза, нужный индекс
            </summary>
            <param name="index">Index</param>
            <param name="dimension">Срез/размерность</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.Swap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Перегруппировка матрицы (Замена индексов)
            </summary>
            <param name="i">На какой индекс заменить</param>
            <param name="j">Какой индекс заменить</param>
            <param name="dimension">Размерность среза 0 или 1</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetCorrelationMatrixNorm(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Метод создает матрицу с коэффициентами попарной корреляции векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns>Корреляционная матрица</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetCovMatrix(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Метод создает матрицу с коэффициентами попарной ковариции векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns>Ковариационнай матрица</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.GetCovMatrixFromColumns(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Метод создает матрицу с коэффициентами попарной ковариции векторов
            </summary>
            <param name="matrix">Матрица</param>
            <returns>Ковариационнай матрица</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.MeanMatrix(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Матрица средних 
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.DispersionMatrix(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Матрица дисперсий 
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Matrix.StdMatrix(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Матрица среднеквадратичных отклонений
            </summary>
            <param name="matrices">Массив матриц</param>
        </member>
        <member name="T:AI.DataStructs.Algebraic.MatrixType">
            <summary>
            Тип матрицы
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.MatrixType.Image">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.MatrixType.MatStruct">
            <summary>
            Математическая структура
            </summary>
        </member>
        <member name="T:AI.DataStructs.Algebraic.MatrixSaver">
            <summary>
            Класс для сохранения матрицы
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.MatrixSaver.Save(System.String,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Сохранение матрицы
            </summary>
            <param name="path">File path</param>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.MatrixSaver.Load(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="T:AI.DataStructs.Algebraic.Tensor">
            <summary>
            Represents a rank 3 tensor
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Tensor.H">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Tensor.W">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Tensor.D">
            <summary>
            Depth
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Tensor.S">
            <summary>
            Square (Height * Width)
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Tensor.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Tensor.Count">
            <summary>
            Element by index
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Tensor.Item(System.Int32)">
            <summary>
            Element by index
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Tensor.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Accessing an item by index
            </summary>
            <param name="i">Height</param>
            <param name="j">Width</param>
            <param name="k">Depth</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.#ctor(System.Double[0:,0:,0:])">
            <summary>
            Initialization with an array
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creating a tensor with zeros
            </summary>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="d">Depth</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.#ctor(System.Double[])">
            <summary>
            Initialization with an array
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Addition(AI.DataStructs.Algebraic.Tensor,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Addition(AI.DataStructs.Algebraic.Tensor,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Addition(System.Double,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Multiply(AI.DataStructs.Algebraic.Tensor,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="K"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Multiply(System.Double,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="K"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Multiply(AI.DataStructs.Algebraic.Tensor,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Division(AI.DataStructs.Algebraic.Tensor,System.Double)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Division(System.Double,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Division(AI.DataStructs.Algebraic.Tensor,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Subtraction(AI.DataStructs.Algebraic.Tensor,System.Double)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Subtraction(System.Double,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.op_Subtraction(AI.DataStructs.Algebraic.Tensor,AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Transform(System.Func{System.Double,System.Double})">
            <summary>
            Element-wise transformation of tensor
            </summary>
            <param name="transform">Transform function</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.ToMatrices">
            <summary>
            Convert tensor to array of matrices
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.FromMatrices(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Convert matrix array to tensor
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.ToVector">
            <summary>
            Convert to vector
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.VectorToTensor(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Converting a vector to a tensor
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.ToString">
            <summary>
            Tensor to string translation
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.SubtractingDepth(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Subtracting a vector element by element from depth
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.PlusD(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Add a vector element-wise to the depth
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Sum">
            <summary>
            Sum of all tensor elements
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Mean">
            <summary>
            Average of all tensor elements
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Dispersion(System.Double)">
            <summary>
            Dispersion
            </summary>
            <param name="mean">Calculated mean</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Dispersion">
            <summary>
            Dispersion
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Std(System.Double)">
            <summary>
            Standard deviation
            </summary>
            <param name="mean">Calculated mean</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Tensor.Std">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="T:AI.DataStructs.Algebraic.Vector">
            <summary>
            A class that implements vectors and operations on them
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Vector.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.MoveNext">
            <summary>
            Move pointer to next element
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Reset">
            <summary>
            Reset pointer
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Vector.Count">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Vector.IsReadOnly">
            <summary>
            The collection is read-only
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexOf(System.Double)">
            <summary>
            Defines an index, analogous to IndexValue
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Insert(System.Int32,System.Double)">
            <summary>
            Adding an item after a specific index
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.RemoveAt(System.Int32)">
            <summary>
            Delete by index
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Add(System.Double)">
            <summary>
            Adding an item
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Add(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adding a sequence
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.AddCB(System.Double)">
            <summary>
            Adding an item (circular buffer)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.AddCBE(System.Double)">
            <summary>
            Adding an item (circular buffer to end)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Contains(System.Double)">
            <summary>
            Checks if the vector contains the given element
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copying data starting from arrayIndex
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Remove(System.Double)">
            <summary>
            Removes the first occurrence of item
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Sort">
            <summary>
            Sotrting
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Sort(System.Comparison{System.Double})">
            <summary>
            Sotrting
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Vector.Data">
            <summary>
            Array of type double containing vector samples
            </summary>
        </member>
        <member name="P:AI.DataStructs.Algebraic.Vector.Item(System.Int32)">
            <summary>
            Accessing an item by index
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor">
            <summary>
            Creates a vector with zeros of dimension 3
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creating a vector based on the IEnumerable interface
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creating a vector based on the IEnumerable interface float
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Double)">
            <summary>
            Creates a vector of dimension 1, with the given value
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Int32)">
            <summary>
            Creates a vector with zeros of dimension n
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Double[])">
            <summary>
            Creates a vector from an array
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.Byte[])">
            <summary>
            Creates a vector from an byte array
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.IO.Stream)">
            <summary>
            Creates a vector from a stream
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.String[])">
             <summary>
            Creates a vector based on strings, where each string represents a double
             </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.String,System.Char)">
            <summary>
            Creates a vector based on a text file containing doubles
            </summary>
            <param name="textPath">File path</param>
            <param name="separator">separator, 1 is replaced with \n</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.#ctor(System.String)">
            <summary>
            Creates a vector from a text file, each line represents a number double
            </summary>
            <param name="textPath">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Addition(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Addition(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Addition(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Subtraction(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Subtraction(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Subtraction(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_UnaryNegation(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Отрицание
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Multiply(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Multiply(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Multiply(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Division(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Division(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Division(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Modulus(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Modulus(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Modulus(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Остаток от деления поэлементно
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Equality(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Проверка равенства
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Inequality(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Проверка равенства
            </summary>
            <param name="A">Вектор 1</param>
            <param name="B">Вектор 2</param>
            <returns>Равно ли</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Implicit(AI.DataStructs.Algebraic.Vector)~System.Double[]">
            <summary>
            Implicit cast Vector -> double[]
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Implicit(System.Double[])~AI.DataStructs.Algebraic.Vector">
            <summary>
            Implicit cast double[] -> Vector
            </summary>
            <param name="dbs"></param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Implicit(System.Int32[])~AI.DataStructs.Algebraic.Vector">
            <summary>
            Implicit cast int[] -> Vector
            </summary>
            <param name="dbs"></param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.op_Explicit(AI.DataStructs.Algebraic.Vector)~System.Int32[]">
            <summary>
            Explicit cast Vector -> int[]
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.NanToValue(System.Double)">
            <summary>
            Replacing uncertainty with a number
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.NanToMean">
            <summary>
            Replacing uncertainty with mean
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Repeat(System.Int32)">
            <summary>
            Vector repeat
            </summary>
            <param name="count">Number of repetitions</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Cos(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Cosine of angle between vectors
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.VectorToBts">
            <summary>
            Vector to byte array
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.MaxOut">
            <summary>
            Convert a vector to a one-hot representation
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.MaxOutVector(System.Double,System.Double)">
            <summary>
            Getting a vector with one at the index position with the maximum value and -1 at the rest
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetUnitVector">
            <summary>
            Getting a unit vector (direction vector)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexDel(System.Int32)">
            <summary>
            Delete by index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Round(System.Int32)">
            <summary>
            Rounding
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ElementDel(System.Double)">
            <summary>
            Delete selected item
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexValue(System.Double)">
            <summary>
            Returns the index of the first occurrence of a value  
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ElementsDel(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Deleting selected items
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ElementsDel(System.Double[])">
            <summary>
            Deleting selected items
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ElementsDel(System.Collections.Generic.List{System.Double})">
            <summary>
            Deleting selected items
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.SaveAsText(System.String)">
            <summary>
            Saves the vector as a text file
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetIntervalDouble(System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns a vector in the range [a; b)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetInterval(System.Int32,System.Int32)">
            <summary>
            Returns a vector in the range [a; b)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Copy">
            <summary>
            Vector copy
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.AddSimmetr">
            <summary>
            Adding a mirrored vector
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Revers">
            <summary>
            Writing the vector in reverse order, for example, the vector {1,2,3} turns into {3,2,1}
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.CutAndZero(System.Int32)">
            <summary>
            Zero padding or cropping to the desired vector size.
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Shift(System.Int32)">
            <summary>
            Shift
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ToMatrix">
            <summary>
            Vector to matrix
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Decim(System.Int32)">
            <summary>
            Decimation (thinning) vector
            </summary>
            <param name="kDecim">Decimation factor</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.UnPooling(System.Int32)">
            <summary>
            Up sampling, inserting zeros in the middle
            </summary>
            <param name="kUnPool">The number of zeros between samples of the original vector</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.InterpolayrZero(System.Int32)">
            <summary>
            Interpolation by a polynomial of order zero
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.AddOne">
            <summary>
            Adds one to the beginning
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Is0">
            <summary>
            Checks if all elements of the vector are zero
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Is0(System.Int32)">
            <summary>
            Checks if a vector contains more than n zero elements
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Save(System.String)">
            <summary>
            Save vector
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Open(System.String)">
            <summary>
            Loading vector
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ToString">
            <summary>
            Saves the values ​​of the elements of the vector to a string
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.TransformVector(System.Func{System.Double,System.Double})">
            <summary>
            Vector transformation
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.TransformVectorInd(System.Func{System.Int32,System.Double})">
            <summary>
            Vector transformation
            </summary>
            <param name="transformFunc">Transform function, function from index</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.TransformVectorInd(System.Func{System.Int32,System.Double,System.Double})">
            <summary>
            Transform vector
            </summary>
            <param name="transformFunc">Transform function, function from index and value F(int i, double vect_i)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.TransformVectorX(AI.DataStructs.Algebraic.Vector,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Vector transformation (Use vector of arguments)
            </summary>
            <param name="transformFunc">Transform function, a function of the value of the vector of arguments and the current vector
            double F(double x_i, double vect_i)</param>
            <param name="x">Vector of arguments</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Scaling">
            <summary>
            Scaling, brings the vector to a range of 0-1
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.MaxAbs">
            <summary>
            Maximum value (abs)
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Min">
            <summary>
            Минимальное значение
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.MinAbs">
            <summary>
            Минимальное значение по модулю
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Mean">
            <summary>
            Arithmetic mean of a vector
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Sum">
            <summary>
            Сумма
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IsContainNan">
            <summary>
            Does the uncertainty vector contain
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Dispers">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Norm">
            <summary>
            Норма вектора
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Normalise">
            <summary>
            Нормализация ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Normalise(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Нормализация по ансамблю ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.TransformVectorX(AI.DataStructs.Algebraic.Vector,System.Func{System.Double,System.Double})">
            <summary>
            Vector transformation (Use vector of arguments)
            </summary>
            <param name="transformFunc">Функция преобразования, функция от значения вектора аргументов</param>
            <param name="x">Вектор аргументов</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Crosser(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Creates one vector from two vectors by applying the cross function for each element.
            </summary>
            <param name="x">First vector</param>
            <param name="y">Second vector</param>
            <param name="cross">Mixing function(crossing)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.SummWithCol(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Соединение векторов с перекрытием, путем суммирования в обл. перекрытия
            </summary>
            <param name="data">Вектора</param>
            <param name="col">Области перекрытия(коллизии)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.OneHotPol(System.Int32,System.Int32)">
            <summary>
            Однополярное преобразование индекса(натуральное число) в вектор one-hot, везде значение 0, на указанном индексе 1
            </summary>
            <param name="index">Index</param>
            <param name="maxInd">Максимально возможный индекс</param>
            <returns>Вектор, где все нули, кроме позиции индекса</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.OneHotBePol(System.Int32,System.Int32)">
            <summary>
            Двуполярное преобразование индекса(натуральное число) в вектор one-hot, везде значение 0, на указанном индексе 1
            </summary>
            <param name="index">Index</param>
            <param name="maxInd">Максимально возможный индекс</param>
            <returns>Вектор, где все -1, кроме позиции индекса</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Concatinate(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Конкатенация векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Seq0(System.Double,System.Double)">
            <summary>
            Последовательность начиная с нуля
            </summary>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Seq(System.Double,System.Double,System.Double)">
            <summary>
            Последовательность
            </summary>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
            <param name="start">Начальное значение</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Time0(System.Double,System.Double)">
            <summary>
            Массив отсчетов времени
            </summary>
            <param name="fd">Sampling frequency</param>
            <param name="t">Время (сек)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetWindows(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="inp">Input</param>
            <param name="w">Window size</param>
            <param name="step">step</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetWindowsWithFunc(System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector},AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Input</param>
            <param name="w">Window size</param>
            <param name="step">step</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetWindowsWithFuncVect(System.Func{AI.DataStructs.Algebraic.Vector,System.Double},AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Input</param>
            <param name="w">Window size</param>
            <param name="step">step</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ScaleData(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Масштабирование данных, для каждого вектора выполняется нормализация по ансамблю
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Mean(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Усреднение по ансамблю
            </summary>
            <param name="vectors">Ансамбль векторов</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.Std(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            СКО по ансамблю
            </summary>
            <param name="vectors">Ансамбль векторов</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.LoadAsBinary(System.String)">
            <summary>
            Loading vector из массива double
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.SaveAsBinary(System.String,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Сохранение в массив double
            </summary>
            <param name="path">File path</param>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.ListToVector(System.Collections.Generic.List{System.Double})">
            <summary>
            Преобразование List в вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.AddVector(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вставляет отсчеты второго вектора, после отсчетов первого
            </summary>
            <param name="startVector">куда вставлять</param>
            <param name="addedVector">что вставлять</param>
            <returns>вектор размерности nach.Count+dop.Count</returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.GetCharVector(System.String)">
            <summary>
            Выдает вектор букв
            </summary>
            <param name="str">Строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMax">
            <summary>
            Index элемента с максимальным значением
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMaxAbs">
            <summary>
            Index элемента с максимальным абсолютным значением
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMin">
            <summary>
            Index элемента с минимальным значением
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMinAbs">
            <summary>
            Index элемента с минимальным абсолютным значением
            </summary>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMaxRegion(System.Int32,System.Int32)">
            <summary>
            Index элемента с максимальным значением
            </summary>
            <param name="a">Index начала региона(включительно)</param>
            <param name="b">Index конца региона(включительно)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMaxAbsRegion(System.Int32,System.Int32)">
            <summary>
            Index элемента с максимальным абсолютным значением в регионе
            </summary>
            <param name="a">Index начала региона(включительно)</param>
            <param name="b">Index конца региона(включительно)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMinRegion(System.Int32,System.Int32)">
            <summary>
            Index элемента с минимальным значением
            </summary>
            <param name="a">Index начала региона(включительно)</param>
            <param name="b">Index конца региона(включительно)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexMinAbsRegion(System.Int32,System.Int32)">
            <summary>
            Index элемента с минимальным абсолютным значением в регионе
            </summary>
            <param name="a">Index начала региона(включительно)</param>
            <param name="b">Index конца региона(включительно)</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexValueEps(System.Double,System.Double,AI.DataStructs.Algebraic.Vector.TypeEps)">
            <summary>
            Index  первого вхождения значения удв. усл., что значение отличается от value не более чем на eps, и типом ограничений typeEps
            </summary>
            <param name="value">Значение</param>
            <param name="eps">Окрестность</param>
            <param name="typeEps">Тип ограничений</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexValueNeighborhoodMin(System.Double)">
            <summary>
            Ближайший минимальный индекс
            </summary>
            <param name="value">Значение</param>
        </member>
        <member name="M:AI.DataStructs.Algebraic.Vector.IndexesValueEps(System.Double,System.Double,AI.DataStructs.Algebraic.Vector.TypeEps)">
            <summary>
            Индексы  всех вхождений значений удв. усл., что значение отличается от value не более чем на eps, и типом ограничений typeEps
            </summary>
            <param name="value">Значение</param>
            <param name="eps">Окрестность</param>
            <param name="typeEps">Тип ограничений</param>
        </member>
        <member name="T:AI.DataStructs.Algebraic.Vector.TypeEps">
            <summary>
            тип поиска
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Vector.TypeEps.Up">
            <summary>
            Ограничение сверху от value до value+eps
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Vector.TypeEps.Down">
            <summary>
            Ограничение снизу от value-eps до value
            </summary>
        </member>
        <member name="F:AI.DataStructs.Algebraic.Vector.TypeEps.Neighborhood">
            <summary>
            Поиск в окрестности от value-eps до value+eps
            </summary>
        </member>
        <member name="T:AI.DataStructs.BinarySerializaterDataInMemory">
            <summary>
            Класс для бинарной сериализации объектов(Вся обработка данных ведется в оператиной памяти)
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.IV">
            <summary>
            Вектор инициализации алгоритма AES
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.Salt">
            <summary>
            Криптосоль
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.IsZipped">
            <summary>
            Сжатие
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.IsCrypt">
            <summary>
            Шифровано
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.IsRead">
            <summary>
            Для чтения
            </summary>
        </member>
        <member name="P:AI.DataStructs.BinarySerializaterDataInMemory.IsWrite">
            <summary>
            Для записи
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.#ctor">
            <summary>
            Класс для бинарной сериализации объектов (открыть для записи)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Класс для бинарной сериализации объектов (создать для чтения)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.#ctor(System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Класс для бинарной сериализации объектов (создать для чтения)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Класс для бинарной сериализации объектов (создать для чтения)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int32)">
            <summary>
            Добавить число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int16)">
            <summary>
            Добавить число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Double)">
            <summary>
            Добавить число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Single)">
            <summary>
            Добавить число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int64)">
            <summary>
            Добавить число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.String)">
            <summary>
            Добавление строки(utf-8)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.String)">
            <summary>
            Добавление строки(utf-8)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.String,System.Text.Encoding)">
            <summary>
            Добавление строки 
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.String,System.Text.Encoding)">
            <summary>
            Добавление строки 
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Добавление вектора (Только данные)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Добавление вектора
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(AI.DataStructs.IBinSerial[])">
            <summary>
            Add IBinSerial array
            </summary>
            <param name="arr">Array</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Byte[])">
            <summary>
            Добавить массив байт
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Double[])">
            <summary>
            Добавить массив double
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Single[])">
            <summary>
            Добавить массив float
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int32[])">
            <summary>
            Добавить массив int
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int16[])">
            <summary>
            Добавить массив short
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Int64[])">
            <summary>
            Добавить массив short
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Add(System.Char[])">
            <summary>
            Добавить массив char
            </summary>
            <param name="arr">Массив</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Double[])">
            <summary>
            Добавить только данные(Массив double)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Single[])">
            <summary>
            Добавить только данные(Массив float)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Int32[])">
            <summary>
            Добавить только данные(Массив int)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Int64[])">
            <summary>
            Добавить только данные(Массив long)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Int16[])">
            <summary>
            Добавить только данные(Массив short)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.AddOnlyData(System.Char[])">
            <summary>
            Добавить только данные(Массив букв)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadInt">
            <summary>
            Прочитать число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadLong">
            <summary>
            Прочитать число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadShort">
            <summary>
            Прочитать число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadDouble">
            <summary>
            Прочитать число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadFloat">
            <summary>
            Прочитать число
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadVector">
            <summary>
            Чтение вектора
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadString">
            <summary>
            Чтение строки utf-8
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadString(System.Text.Encoding)">
            <summary>
            Чтение строки в произвольной кодировке
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadBytes">
            <summary>
            Прочитать массив байт
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadDoubles">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadFloats">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadInts">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadShorts">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadLongs">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadChars">
            <summary>
            Прочитать массив
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataDoubleArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataFloatArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataIntArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataLongArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataShortArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyDataCharArray(System.Int32)">
            <summary>
            Чтение только данных массива
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ReadOnlyData(System.Int32)">
            <summary>
            Добавление вектора (Только данные)
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Zipped">
            <summary>
            Сжать данные
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.UnZipped">
            <summary>
            Разархивировать
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Encrypt(System.String)">
            <summary>
            Зашифровать
            </summary>
            <param name="password">Пароль</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Decrypt(System.String)">
            <summary>
            Расшифровать
            </summary>
            <param name="password">Пароль</param>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.Save(System.String)">
            <summary>
            Сохранение в файл
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.InitFromBts(System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Инициализация массивом байт
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ToByteArray">
            <summary>
            Перевод в массив байт
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ToMemoryStream">
            <summary>
            Перевод в поток памяти
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.ToString">
            <summary>
            Перевод в строку base64
            </summary>
        </member>
        <member name="M:AI.DataStructs.BinarySerializaterDataInMemory.FromBase64String(System.String,System.Boolean,System.Boolean)">
            <summary>
            Класс для бинарной сериализации объектов (создать для чтения) из строки формата base64
            </summary>
        </member>
        <member name="T:AI.DataStructs.IBinSerial">
            <summary>
            Object with binary serialization support
            </summary>
        </member>
        <member name="M:AI.DataStructs.IBinSerial.GetBts">
            <summary>
            Writing an object to a byte array
            </summary>
        </member>
        <member name="M:AI.DataStructs.IBinSerial.FromBts(System.Byte[])">
            <summary>
            Initializing an object with an array of bytes
            </summary>
            <param name="bts">byte array</param>
        </member>
        <member name="T:AI.DataStructs.TableOfContentsOfTheSortedVector">
            <summary>
            Оглавление сортированного вектора
            </summary>
        </member>
        <member name="M:AI.DataStructs.TableOfContentsOfTheSortedVector.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Оглавление сортированного вектора
            </summary>
            <param name="vect">Сортированный вектор</param>
            <param name="numCh">Число глав</param>
        </member>
        <member name="M:AI.DataStructs.TableOfContentsOfTheSortedVector.IndexValueNeighborhoodMin(System.Double)">
            <summary>
            Ближайший минимальный индекс
            </summary>
            <param name="value">Значение</param>
        </member>
        <member name="T:AI.DSP.Analyse.FrequencyResponse">
            <summary>
            АЧХ
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.FrequencyResponse.FStart">
            <summary>
            Начальная частота
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.FrequencyResponse.FEnd">
            <summary>
            Конечная частота
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.FrequencyResponse.Step">
            <summary>
            Шаг по частоте
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.FrequencyResponse.Time">
            <summary>
            Время реализации
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.FrequencyResponse.Freq">
            <summary>
            Отсчеты по частоте
            </summary>
        </member>
        <member name="M:AI.DSP.Analyse.FrequencyResponse.#ctor(System.Int32)">
            <summary>
            АЧХ
            </summary>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.DSP.Analyse.FrequencyResponse.Test(System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector})">
            <summary>
            Проверка АЧХ алгоритма
            </summary>
            <param name="alg">Алгоритм</param>
        </member>
        <member name="T:AI.DSP.Analyse.Trend">
            <summary>
            Тренд сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.Trend.K">
            <summary>
            Коэффициент наклона
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.Trend.B">
            <summary>
            Смещение
            </summary>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обучающая выборка
            </summary>
            <param name="X">Вектор X(независимая переменная)</param>
            <param name="Y">Вектор Y(зависимая переменная)</param>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns>Строка типа: f(x) = k*x+(b)</returns>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.Predict(System.Double)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="x">Независимая переменная</param>
            <returns>Зависимая переменная</returns>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="X">Вектор независимых переменных</param>
            <returns>Вектор зависимых переменных</returns>
        </member>
        <member name="T:AI.DSP.Analyse.Welch">
            <summary>
            Welch method
            </summary>
        </member>
        <member name="M:AI.DSP.Analyse.Welch.WelchRun(AI.DataStructs.Algebraic.Vector,System.Int32,System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
             Welch method run
            </summary>
            <param name="signal">Signal</param>
            <param name="window">Окно</param>
            <param name="overlap">Overlap</param>
            <param name="windowForFFT">Window weighting function</param>
        </member>
        <member name="M:AI.DSP.Analyse.Welch.BartlettRun(AI.DataStructs.Algebraic.Vector,System.Int32,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Running the periodogram method
            </summary>
            <param name="signal">Signal</param>
            <param name="window">Window</param>
            <param name="windowForFFT">Window weighting function</param>
        </member>
        <member name="T:AI.DSP.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.ChData">
            <summary>
            Отсчеты сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Fd">
            <summary>
            Sampling frequency
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Dt">
            <summary>
            Шаг по времени
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Name">
            <summary>
            Имя канала
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Item(System.Int32)">
            <summary>
            Доступ по индексам к данным канала
            </summary>
            <param name="i">Index</param>
        </member>
        <member name="P:AI.DSP.Channel.ScaleVolt">
            <summary>
            Voltage scale
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.#ctor">
            <summary>
            Channel
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Channel, задается через вектор данных и частоту дискретизации
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32,System.String)">
            <summary>
            Channel, задается через вектор данных, частоту дискретизации и имя
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
            <param name="name">Имя</param>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32,System.String,System.String)">
            <summary>
            Channel, задается через вектор данных, частоту дискретизации, имя и  описание
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:AI.DSP.Channel.GetChannels(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Преобразует масив векторов в массив каналов
            </summary>
            <param name="vects">Массив векторов</param>
            <param name="fd">Sampling frequency</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Channel.ChansToVects(AI.DSP.Channel[])">
            <summary>
            Массив каналов в массив векторов
            </summary>
            <param name="channels">Массив каналов</param>
        </member>
        <member name="M:AI.DSP.Channel.SignalTrend">
            <summary>
            Тренды сигнала
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithoutTrend">
            <summary>
            Сигнал без тренда
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithM0Std1Trend">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается тренд)
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithM0Std1">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается среднее)
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.GetSpectr">
            <summary>
            Рассчитывает спектр
            </summary>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Channel.GetSpectr(System.Func{System.Int32,AI.DataStructs.Algebraic.Vector})">
            <summary>
            Рассчитывает спектр с использованием оконных функций
            </summary>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Channel.Time">
            <summary>
            Генерация отсчетов времени
            </summary>
            <returns>Отсчеты времени</returns>
        </member>
        <member name="M:AI.DSP.Channel.Freq">
            <summary>
            Генерация отсчетов частоты
            </summary>
            <returns>Отсчеты частоты</returns>
        </member>
        <member name="M:AI.DSP.Channel.KoefScaleToVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Коэффициент для перевода в вольты
            </summary>
            <param name="scaleVolt">Масштаб</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Channel.YName">
            <summary>
            Единица измерения шкалы Y
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.ConvertVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Конвертирование масштаба по Y
            </summary>
            <param name="newScale">Новый масштаб</param>
        </member>
        <member name="M:AI.DSP.Channel.Filtration(AI.DSPCore.IFilter)">
            <summary>
            Фильтрация канала
            </summary>
            <param name="filter">Фильтр</param>
        </member>
        <member name="T:AI.DSP.FIR.FilterLowButterworth">
            <summary>
            Фильтр Баттерворта
            </summary>
        </member>
        <member name="P:AI.DSP.FIR.FilterLowButterworth.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSP.FIR.FilterLowButterworth.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Фильтр Баттерворта
            </summary>
            <param name="f0">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <param name="signalLen">Длинна реализации</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSP.FIR.FilterLowButterworth.FilterOutp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Фильтрация сигнала
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="T:AI.DSP.FIR.FIRFilter">
            <summary>
            Фильтр с конечной импульсной характеристикой
            </summary>
        </member>
        <member name="P:AI.DSP.FIR.FIRFilter.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSP.FIR.FIRFilter.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32,AI.DSP.FIR.FIRCalcConvType)">
            <summary>
            Инициализация фильтра
            </summary>
            <param name="ht">Impulse response фильтра</param>
            <param name="fd">Sampling frequency</param>
            <param name="calcConvType">Метод расчета свертки</param>
        </member>
        <member name="M:AI.DSP.FIR.FIRFilter.FilterOutp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Расчет отклика фильтра на сигнал
            </summary>
            <param name="input">Сигнал</param>
        </member>
        <member name="T:AI.DSP.FIR.FIRCalcConvType">
            <summary>
            Метод расчета свертки
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Simple">
            <summary>
            Простая свертка
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.WithFFT">
            <summary>
            Быстрая с исп. БПФ
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Sectional">
            <summary>
            Секционная
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Sectional4">
            <summary>
            Секционная 4 потока
            </summary>
        </member>
        <member name="T:AI.DSP.IIR.IIRFilter">
            <summary>
            IIR filter
            </summary>
        </member>
        <member name="P:AI.DSP.IIR.IIRFilter.Name">
            <summary>
            Filter name
            </summary>
        </member>
        <member name="P:AI.DSP.IIR.IIRFilter.A">
            <summary>
            Coefficients a
            </summary>
        </member>
        <member name="P:AI.DSP.IIR.IIRFilter.B">
            <summary>
            Coefficients b
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            IIR filter
            </summary>
            <param name="a">Coefficients a</param>
            <param name="b">Coefficients b</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Outp(System.Double)">
            <summary>
            Filter output
            </summary>
            <param name="inp">Input</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.FilterOutp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recursive filter output
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.FilterOutp(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Recursive filter output
            </summary>
            <param name="signal">Input signal</param>
            <param name="iteration">Filtering iterations</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Reset">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.ExportState">
            <summary>
            State export
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.ImportState(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Importing filter state
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="offsetA">Offset outputs</param>
            <param name="offsetB">Offset inputs</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Save(System.String)">
            <summary>
            Filter save
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Load(System.String)">
            <summary>
            Filter load
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.GetBts">
            <summary>
            Writing an object to a byte array
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.FromBts(System.Byte[])">
            <summary>
            Initializing an object with an array of bytes
            </summary>
            <param name="bts">byte array</param>
        </member>
        <member name="T:AI.DSP.Modulation.AM">
            <summary>
            Amplitude modulation
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.AM.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Инициализация модулятора ампл. модуляции
            </summary>
            <param name="fd">Sampling frequency</param>
            <param name="f0">Carrier frequency</param>
            <param name="m">Modulation rate</param>
        </member>
        <member name="M:AI.DSP.Modulation.AM.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.AM.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция
            </summary>
            <param name="channel">Channel с модулированным сигналом</param>
        </member>
        <member name="M:AI.DSP.Modulation.AM.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.DSB">
            <summary>
            Амплитудная модуляция с подавленной центральной частотой
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.DSB.#ctor(System.Int32,System.Double)">
            <summary>
            Инициализация модулятора ампл. модуляции с подавленной несущей
            </summary>
            <param name="fd">Sampling frequency</param>
            <param name="f0">Carrier frequency</param>
        </member>
        <member name="M:AI.DSP.Modulation.DSB.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодулятор
            </summary>
            <param name="channel">Channel</param>
        </member>
        <member name="M:AI.DSP.Modulation.DSB.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.DSB.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.FM">
            <summary>
            Частотная модуляция
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.FM.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Инициализация модулятора частотной модуляции
            </summary>
            <param name="fd">Sampling frequency</param>
            <param name="f0">Carrier frequency</param>
            <param name="deltF">Дифиация частоты</param>
        </member>
        <member name="M:AI.DSP.Modulation.FM.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция ЧМК
            </summary>
            <param name="channel">Channel</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.FM.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.FM.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.IModulator">
            <summary>
            Интерфейс модулятора
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.IModulator.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция сигнала
            </summary>
            <param name="channel">Channel</param>
        </member>
        <member name="M:AI.DSP.Modulation.IModulator.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция сигнала
            </summary>
            <param name="channel">Channel</param>
        </member>
        <member name="T:AI.DSP.Modulation.SSB">
            <summary>
            Однополосная амплитудная модуляция
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.SSB.#ctor(System.Int32,System.Double,AI.DSP.Modulation.SSBType)">
            <summary>
            Инициализация модулятора однополосной ампл. модуляции
            </summary>
            <param name="fd">Sampling frequency</param>
            <param name="f0">Carrier frequency</param>
            <param name="ssbType">Какая полоса будет подавлена</param>
        </member>
        <member name="M:AI.DSP.Modulation.SSB.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.SSB.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция
            </summary>
            <param name="channel">Channel</param>
        </member>
        <member name="M:AI.DSP.Modulation.SSB.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.SSBType">
            <summary>
            Какая полоса будет подавлена
            </summary>
        </member>
        <member name="F:AI.DSP.Modulation.SSBType.Up">
            <summary>
            Верхняя
            </summary>
        </member>
        <member name="F:AI.DSP.Modulation.SSBType.Down">
            <summary>
            Нижняя
            </summary>
        </member>
        <member name="T:AI.DSP.MusicUtils.EchoReverb">
            <summary>
            Class for creating echo and reverb
            </summary>
        </member>
        <member name="P:AI.DSP.MusicUtils.EchoReverb.SampleRate">
            <summary>
            Project sampling rate
            </summary>
        </member>
        <member name="M:AI.DSP.MusicUtils.EchoReverb.#ctor(System.Int32)">
            <summary>
            Echo and reverb
            </summary>
            <param name="sr">Project sampling rate</param>
        </member>
        <member name="M:AI.DSP.MusicUtils.EchoReverb.Echo(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Echo effect
            </summary>
        </member>
        <member name="M:AI.DSP.MusicUtils.EchoReverb.EchoInvers(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Echo effect
            </summary>
        </member>
        <member name="T:AI.DSP.Oversampling.UpSampling">
            <summary>
            Увеличение частоты дискретизации
            </summary>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingRectFilter(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр с прямоугольной АЧХ)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Sampling frequency</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingButterworthFilter(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр Баттерворта)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Sampling frequency</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingButterworthFilterW(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр Баттерворта)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Sampling frequency</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="T:AI.DSP.PhaseCorrectingWindow">
            <summary>
            Windows for correcting phase discontinuities
            </summary>
        </member>
        <member name="T:AI.DSP.Signal1D">
            <summary>
            Основной класс для одномерного сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Name">
            <summary>
            Имя сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Description">
            <summary>
            Описание сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Fd">
            <summary>
            Sampling frequency
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Dt">
            <summary>
            Шаг по времени
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.ScaleVolt">
            <summary>
            Масштаб в вольтах
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="channels">Сигнал</param>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor">
            <summary>
            Создает пустой список каналов
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.DSP.Channel)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Add(AI.DSP.Channel)">
            <summary>
            Добавление сигнала
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Trends">
            <summary>
            Тренды сигнала
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithoutTrend">
            <summary>
            Сигнал без тренда
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithM0Std1Trend">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается тренд)
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithM0Std1">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается среднее)
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.GetSpectr(System.Int32)">
            <summary>
            Рассчитывает спектр
            </summary>
            <param name="numCh">Номер канала</param>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.GetSpectrAll">
            <summary>
            Рассчитывает спектр по всем каналам
            </summary>
            <returns>Спектры</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CorrelationMatrix">
            <summary>
            Корреляционная матрица по каналам
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CorrelationMatrixSpectr">
            <summary>
            Корреляционная матрица амплитудных спектров
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CouplingCoefficient">
            <summary>
            Коэффициент связи между каналами рассчитывается как, единица минус определитель корреляционной матрицы
            </summary>
            <returns>Коэфициент связи [1,0] близко к 1 связь сильная, к 0 слабая</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CouplingCoefficientSp">
            <summary>
            Коэффициент связи между сперктрами каналов рассчитывается как, единица минус определитель корреляционной матрицы амплитудных спектров
            </summary>
            <returns>Коэфициент связи [1,0] близко к 1 связь сильная, к 0 слабая</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.Time">
            <summary>
            Генерация отсчетов времени
            </summary>
            <returns>Отсчеты времени</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.Freq">
            <summary>
            Генерация отсчетов частоты
            </summary>
            <returns>Отсчеты частоты</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.ConvertVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Конвертирование шкалы напряжения 
            </summary>
            <param name="typeScaleVolt">Новый масштаб</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Filtration(AI.DSPCore.IFilter)">
            <summary>
            Фильтрация сигнала
            </summary>
            <param name="filter">Фильтр</param>
        </member>
        <member name="M:AI.DSP.Signal1D.YName">
            <summary>
            Единица измерения шкалы Y
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.ChannelNames">
            <summary>
            Список имен каналов
            </summary>
        </member>
        <member name="T:AI.DSP.ISpectr">
            <summary>
            Базовый интерфейс реализации спектров
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Freq">
            <summary>
            Отсчеты частоты
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Data">
            <summary>
            Данные спектра
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.YLable">
            <summary>
            Название шкалы Y
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.XLable">
            <summary>
            Название шкалы X
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.IsDbScale">
            <summary>
            Выводится ли шкала данные по Y в децибелах
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.LogScaleX">
            <summary>
            Логарифмическая ли шкала частот
            </summary>
        </member>
        <member name="T:AI.DSP.AmplitudeSpectr">
            <summary>
            Амплитудный спектр
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Freq">
            <summary>
            Отсчеты частоты
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Data">
            <summary>
            Амплитуды спектра
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.YLable">
            <summary>
            Название шкалы Y
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.XLable">
            <summary>
            Название шкалы X
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.IsDbScale">
            <summary>
            Выводится ли шкала данные по Y в децибелах
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.LogScaleX">
            <summary>
            Логарифмическая ли шкала частот
            </summary>
        </member>
        <member name="M:AI.DSP.AmplitudeSpectr.#ctor(AI.DSP.Channel,System.Boolean)">
            <summary>
            Амплитудный спектр
            </summary>
            <param name="channel">Channel</param>
            <param name="isDbScale">Выражать ли в db, 20log(x)</param>
        </member>
        <member name="M:AI.DSP.AmplitudeSpectr.#ctor(AI.DSP.Channel,System.Func{System.Int32,AI.DataStructs.Algebraic.Vector},System.Boolean)">
            <summary>
            Амплитудный спектр
            </summary>
            <param name="channel">Channel</param>
            <param name="windowWFunc">Оконная функция</param>
            <param name="isDbScale">Выражать ли в db, 20log(x)</param>
        </member>
        <member name="T:AI.DSP.SpectrumStretching">
            <summary>
            Spectrum stretching and compression class
            </summary>
        </member>
        <member name="M:AI.DSP.SpectrumStretching.SpectrumStretch(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32)">
            <summary>
            Spectrum stretching
            </summary>
            <param name="signal">Input signal</param>
            <param name="k">Stretch ratio</param>
        </member>
        <member name="T:AI.DSP.TypeScaleVolt">
            <summary>
            Масштаб в вольтах
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.kV">
            <summary>
            Киловольты 
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.V">
            <summary>
            Вольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.mV">
            <summary>
            Милливольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.uV">
            <summary>
            Микровольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.nV">
            <summary>
            Нановольты
            </summary>
        </member>
        <member name="T:AI.ComplexMatrix">
            <summary>
            Матрица с комплексными числами
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.H">
            <summary>
            Число строк
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.W">
            <summary>
            Число столбцов
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.MatrixData">
            <summary>
            Данные
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Индексы
            </summary>
            <param name="i">номер строки</param>
            <param name="j">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor">
            <summary>
            Создает мактрицу 3х3
            </summary>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает матрицу hxw
            </summary>
            <param name="h">Число строк</param>
            <param name="w">Число столбцов</param>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Создает матрицу из 2х вещественных
            </summary>
            <param name="real">Реальная часть</param>
            <param name="im">Мнимая</param>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Создает матрицу по ее реальной части
            </summary>
            <param name="real">Реальная часть</param>
        </member>
        <member name="M:AI.ComplexMatrix.op_Multiply(AI.ComplexMatrix,AI.ComplexMatrix)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixMagn">
            <summary>
            Матрица амплитуд
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixPhase">
            <summary>
            Матрица фаз
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixReal">
            <summary>
            Матрица действительной части
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixIm">
            <summary>
            Матрица мнимой части
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.Transform(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Поэлементное преобразование матриц
            </summary>
            <param name="func">Функция преобразования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.TransformSelf(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Матрица изменяет саму себя
            </summary>
            <param name="func">Функция преобразования</param>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixFFT(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Двумерное преобразование Фурье
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixIFFT(AI.ComplexMatrix)">
            <summary>
            Обратное двумерное преобразование Фурье
            </summary>
            <param name="input">Входная матрица</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixFFT(AI.ComplexMatrix)">
            <summary>
            Двумерное преобразование Фурье
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ComplexMatrix.GetColumns(AI.ComplexMatrix)">
            <summary>
            Разложение матрицы на столбцы
            </summary>
            <param name="matr">Матрица</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="M:AI.ComplexMatrix.ConjugateMatr">
            <summary>
            Сопряженная матрица
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.AdamarProduct(AI.ComplexMatrix)">
            <summary>
            Адамарово произведение матриц (поэлементное)
            </summary>
            <param name="complexMatrix">Матрица на которую происходит умножение</param>
        </member>
        <member name="M:AI.ComplexMatrix.AdamarProduct(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Адамарово произведение матриц (поэлементное)
            </summary>
            <param name="matrix">Матрица на которую происходит умножение</param>
        </member>
        <member name="T:AI.DSPCore.DCT">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="P:AI.DSPCore.DCT.MainMatrix">
            <summary> 
            Матрица прямого преобразования
            </summary>
        </member>
        <member name="P:AI.DSPCore.DCT.InvMatrix">
            <summary> 
            Матрица обратного преобразования
            </summary>
        </member>
        <member name="M:AI.DSPCore.DCT.#ctor">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="M:AI.DSPCore.DCT.#ctor(System.Int32,System.Int32)">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
            <param name="countInp">Кол-во входов</param>
            <param name="countOutp">Код-во Выходов</param>
        </member>
        <member name="M:AI.DSPCore.DCT.GetMatrW(System.Int32,System.Int32)">
            <summary>
            Матрица
            </summary>
            <param name="Count"></param>
            <param name="M"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.DCT.FDCT(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прямое ДКТ
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.DCT.IDCT(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обратное Дкт
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="T:AI.DSPCore.FastConv">
            <summary>
            Реализация быстрых сверток
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolution(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Быстрая свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Impulse response</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolution(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Быстрая свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Impulse response</param>
            <param name="fd">Sampling frequency</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolutionNorm(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Быстрая нормированная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Impulse response</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastCorrelation(System.Double[])">
            <summary>
            Быстрая корреляция
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastCorrelation(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Быстрая нормированная корреляция
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Патерн</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.SectionalConvolutionNorm(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Быстрая секционная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="pattern">Паттерн (участок в разы меньше сигнала)</param>
            <param name="num">Число секций</param>
        </member>
        <member name="M:AI.DSPCore.FastConv.SectionalConvolution(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Быстрая секционная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="pattern">Паттерн (участок в разы меньше сигнала)</param>
            <param name="num">Число секций</param>
        </member>
        <member name="T:AI.DSPCore.FastHilbert">
            <summary>
            Description of Hilbert.
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.ConjugateToTheHilbert(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Сигнал сопряженный по Гильберту
            </summary>
            <param name="st">Исходный сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.GetAnalSig(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Аналитический сигнал
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Envelope(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Огибающая
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Phase(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Мгновенная фаза
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Frequency(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Мгновенная частота
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.EnvelopeIQ(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Выделение огибающей на базе квадратурн. сост
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.PhaseIQ(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Выделение девиации частоты на базе квадратурн. сост
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.IQ(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Выделение девиации частоты на базе квадратурн. сост
            </summary>
        </member>
        <member name="T:AI.DSPCore.Filters">
            <summary>
            Класс для реализации цифровых фильтров
            </summary>
        </member>
        <member name="M:AI.DSPCore.Filters.Filter(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Boolean)">
            <summary>
            Реализация простого фильтра
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="kw">АЧХ</param>
            <param name="mean">Нужна ли постоянная составляющая</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.Filter(AI.DataStructs.Algebraic.Vector,AI.ComplexVector,System.Boolean)">
            <summary>
            Реализация простого фильтра
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="kw">КЧХ</param>
            <param name="mean">Нужна ли постоянная составляющая</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterKontur(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Реализация колебательного контура
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="Q">Добротность</param>
            <param name="f0">Резонансная частота</param>
            <param name="fd">Sampling frequency</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLow(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32)">
            <summary>
            ФНЧ (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLowButterworthCFH(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            ФНЧ (АЧХ повторяет АЧХ Баттерворта), задан через КЧХ
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <param name="order">Порядок фильтра</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLowButterworthAFH(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            ФНЧ (АЧХ повторяет АЧХ Баттерворта), задан через АЧХ
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <param name="order">Порядок фильтра</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterBand(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Полосовой фильтр (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr1">Нижняя частота полосы</param>
            <param name="sr2">Верхняя частота полосы</param>
            <param name="fd">Sampling frequency</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterHigh(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32)">
            <summary>
            ФВЧ (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterRezector(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Режекторный фильтр
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr1">Нижняя частота полосы</param>
            <param name="sr2">Верхняя частота полосы</param>
            <param name="fd">Sampling frequency</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.GetAFH(AI.DataStructs.Algebraic.Vector,System.Double[],AI.DSPCore.AFHType)">
            <summary>
            Создание АЧХ нужного типа
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">параметры</param>
            <param name="afh">Тип АЧХ</param>
        </member>
        <member name="M:AI.DSPCore.Filters.CreatAFH(AI.DataStructs.Algebraic.Vector,System.String[])">
            <summary>
            Создание составной АЧХ
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">Параметры</param>
            <returns>Возвращает АЧХ</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.ExpAv(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Эспоненциональное скользящее среднее
            </summary>
            <param name="inp">Input</param>
            <param name="oldPart">Коэффициент сглаживания</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Filters.MAv(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Cкользящее среднее
            </summary>
            <param name="inp">Input</param>
            <param name="l">Размер окна</param>
        </member>
        <member name="M:AI.DSPCore.Filters.GetEnvelope(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Получение огибающей
            </summary>
            <param name="inp"></param>
            <param name="dec">Прореживание</param>
        </member>
        <member name="M:AI.DSPCore.Filters.ButterworthLowAFH(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ачх фильтра Баттерворта
            </summary>
            <param name="Count">Число отсчетов сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSPCore.Filters.ButterworthLowCFH(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            КЧХ фильтра Баттерворта
            </summary>
            <param name="Count">Число отсчетов сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Sampling frequency</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="T:AI.DSPCore.AFHType">
            <summary>
            Типы АЧХ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Low">
            <summary>
            ФНЧ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.High">
            <summary>
            ФВЧ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Rezector">
            <summary>
            Режектор
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Band">
            <summary>
            Полосовой
            </summary>
        </member>
        <member name="T:AI.DSPCore.GetSpectrEnerge">
            <summary>
            Description of GetSpectrEnerge.
            </summary>
        </member>
        <member name="M:AI.DSPCore.GetSpectrEnerge.#ctor(System.Double)">
            <summary>
            Анализ формант
            </summary>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.DSPCore.GetSpectrEnerge.Add(System.Double,System.Double)">
            <summary>
            Добавление диапозона частот
            </summary>
            <param name="b">Начальная частота форманты</param>
            <param name="e">Конечная частота форманты</param>
        </member>
        <member name="M:AI.DSPCore.GetSpectrEnerge.GetAmplFreq(AI.DataStructs.Algebraic.Vector)">
            <summary>
             Возвращает суммарные амплитуды в формантах
            </summary>
            <param name="inp">Входной вектор</param>
            <returns>Вектор амплитуд</returns>
        </member>
        <member name="T:AI.DSPCore.Kepstr">
             <summary>
            Кепстральный анализ
             </summary>
        </member>
        <member name="M:AI.DSPCore.Kepstr.FKT(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Быстрое кепстральное преобразование
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Kepstr.FKT(AI.ComplexVector)">
            <summary>
            Быстрое кепстральное преобразование
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="T:AI.DSPCore.OptimalFilter">
            <summary>
            Description of OptimalFilter.
            </summary>
        </member>
        <member name="M:AI.DSPCore.OptimalFilter.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Оптимальный (согласованный) фильтр
            </summary>
            <param name="signal"></param>
            <param name="n"></param>
        </member>
        <member name="M:AI.DSPCore.OptimalFilter.Result(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прохождение фильтра
            </summary>
            <param name="signal">Сигнал на входе</param>
        </member>
        <member name="M:AI.DSPCore.OptimalFilter.SpectrCompressLFM(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Сжатие ЛЧМ по спектру
            </summary>
        </member>
        <member name="T:AI.DSPCore.Signal">
            <summary>
            Description of Signal.
            </summary>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Frequency(System.Int32,System.Double)">
            <summary>
            Массив частот
            </summary>
            <param name="Count">Кол-во значений</param>
            <param name="fd">Sampling frequency</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.FrequencyCentr(System.Int32,System.Double)">
            <summary>
            Центрированный массив частот 
            </summary>
            <param name="Count">Кол-во значений</param>
            <param name="fd">Sampling frequency</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуд</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Вектор фаз</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Carrier frequency</param>
            <param name="fi1">Фаза модулирующего сигала</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Modulation rate</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Carrier frequency</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Modulation rate</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Carrier frequency</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Modulation rate</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRectK(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f1">Carrier frequency</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Modulation rate</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRectA(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Carrier frequency</param>
            <param name="f2">Частота модулятора</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания
            </summary>
            <param name="t"></param>
            <param name="f1"></param>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.DampedOscillations(AI.DataStructs.Algebraic.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Затухающие колебания
            </summary>
            <param name="t">Время симуляции</param>
            <param name="f">частота</param>
            <param name="kDamp">Коэффициент затухания</param>
            <param name="A">Амплитуда(начальная)</param>
            <param name="fi">Фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Energe(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Энергия выделяемая на едичном резисторе за все время
            </summary>
            <param name="signal">Сигнал отсчеты</param>
            <param name="fd">Частота дискретизация</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.LFMRectNP(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Пачка ЛЧМ
            </summary>
            <param name="f"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.LFM(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ЛЧМ
            </summary>
            <param name="df"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
        </member>
        <member name="M:AI.DSPCore.Signal.Perediscr(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Передискретизация сигнала
            (повышение частоты дискретизации в целое число раз)
            </summary>
            <param name="inp">Входной вектор</param>
            <param name="fd">Старая частота дискретизации</param>
            <param name="newfd">Новая частота дикретизации</param>
            <returns>Вектор тойже длительности, что и входной,
            но с более высокой частотой дискретизации</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Norm(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Норма сигнала
            </summary>
            <param name="signal"></param>
            <param name="fd"></param>
            <returns></returns>
        </member>
        <member name="T:AI.DSPCore.Wavelet">
            <summary>
            Вейвлеты
            </summary>
        </member>
        <member name="M:AI.DSPCore.Wavelet.#ctor(AI.DSPCore.PerentWavelet)">
            <summary>
            Непрерывное вейвлет преобразование
            </summary>
            <param name="pw">Порождение вейвлетов</param>
        </member>
        <member name="M:AI.DSPCore.Wavelet.SerchPatern(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Поиск патернов в сигнале
            </summary>
            <param name="sig">Сигнал</param>
            <returns>Максимумы патернов</returns>
        </member>
        <member name="T:AI.DSPCore.PerentWavelet">
            <summary>
            Ф-я порождения вейвлетов
            </summary>
        </member>
        <member name="F:AI.DSPCore.PerentWavelet.waveletSpectrs">
            <summary>
            Спектры ф-й
            </summary>
        </member>
        <member name="F:AI.DSPCore.PerentWavelet.fur">
            <summary>
            Фурье
            </summary>
        </member>
        <member name="F:AI.DSPCore.PerentWavelet.std">
            <summary>
            Вектор СКО
            </summary>
        </member>
        <member name="F:AI.DSPCore.PerentWavelet.scals">
            <summary>
            Масштабы
            </summary>
        </member>
        <member name="M:AI.DSPCore.PerentWavelet.#ctor(System.Func{System.Double,AI.DataStructs.Algebraic.Vector},AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Порождения вейвлетов
            </summary>
            <param name="wavelet">Порождающая функция</param>
            <param name="scales">Масштабы</param>
            <param name="n">Размерность входа</param>
        </member>
        <member name="T:AI.DSPCore.IFilter">
            <summary>
            Интерфейс фильтра
            </summary>
        </member>
        <member name="P:AI.DSPCore.IFilter.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSPCore.IFilter.FilterOutp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Запуск фильтрации
            </summary>
            <param name="signal">Исходный сигнал</param>
            <returns>Отфильтрованный</returns>
        </member>
        <member name="T:AI.FFT">
            <summary>
            Преобразование Фурье
            </summary>
        </member>
        <member name="F:AI.FFT.SemplesCount">
            <summary>
            Число отсчетов БПФ
            </summary>
        </member>
        <member name="M:AI.FFT.#ctor(System.Int32)">
            <summary>
            БПФ
            </summary>
        </member>
        <member name="M:AI.FFT.CalcFFT(AI.DataStructs.Algebraic.Vector,System.Boolean)">
            <summary>
            Быстрое Фурье
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.FFT.CalcFFT(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Быстрое Фурье
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.FFT.CalcIFFTReal(System.Numerics.Complex[],System.Int32)">
            <summary>
            Быстрое Фурье
            </summary>
        </member>
        <member name="M:AI.FFT.RealIFFT(AI.ComplexVector)">
            <summary>
            Реальная часть ОБПФ
            </summary>
            <param name="cInp">Комплексный вектор</param>
        </member>
        <member name="M:AI.FFT.RealIFFT2(AI.ComplexVector)">
            <summary>
            Реальная часть БПФ(не нормировано на кол-во)
            </summary>
            <param name="inp">Комплексный вектор</param>
        </member>
        <member name="M:AI.FFT.GetSpectr(AI.DataStructs.Algebraic.Vector,System.Func{System.Int32,AI.DataStructs.Algebraic.Vector})">
            <summary>
            Выдает спектр сигнала от 0 до fd/2
            </summary>
            <param name="input">Input data vector</param>
            <param name="window">Оконная ф-я</param>
            <returns>Спектр сигнала</returns>
        </member>
        <member name="M:AI.FFT.IFFT(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="inp">Input</param>
        </member>
        <member name="M:AI.FFT.CalcIFFT(System.Numerics.Complex[])">
            <summary>
            Возвращает спектр сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.FFT.CalcFFT(AI.ComplexVector)">
            <summary>
            Возвращает комплексный вектор спектра сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.FFT.CalcFFT(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Быстрое преобразование Фурье(БПФ)
            </summary>
            <param name="inp">Входной вектор</param>
        </member>
        <member name="M:AI.FFT.CalcIFFT(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="inp">Входной вектор</param>
        </member>
        <member name="M:AI.FFT.CalcIFFT(AI.DataStructs.Algebraic.Vector)">
            <summary>
            ОБПФ
            </summary>
            <param name="inp">Входной вектор</param>
        </member>
        <member name="M:AI.FFT.TimeFrTransform(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Частотно-временное преобразование
            </summary>
            <param name="vect">Вектор</param>
            <param name="lenFr">Размер фрейма</param>
        </member>
        <member name="M:AI.FFT.TimeFrTransformHalf(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Частотно-временное преобразование
            </summary>
            <param name="vect">Вектор</param>
            <param name="lenFr">Размер фрейма</param>
        </member>
        <member name="T:AI.WindowForFFT">
            <summary>
            Оконные ф-ии БПФ
            </summary>
        </member>
        <member name="M:AI.WindowForFFT.HannWindow(System.Int32)">
            <summary>
            Окно ханна дает уровень боковых лепестков -31.5 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.HammingWindow(System.Int32)">
            <summary>
            Окно Хэмминга дает уровень боковых лепестков -42 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.RectWindow(System.Int32)">
            <summary>
            Прямоугольное окно дает уровень боковых лепестков -13 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.BlackmanWindow(System.Int32)">
            <summary>
            Окно Блэкмана дает уровень боковых лепестков -58 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="T:AI.FLV">
            <summary>
            Fuzzy Logic Variable(FLV)
            </summary>
        </member>
        <member name="P:AI.FLV.Flv">
            <summary>
            Нечеткая логическая переменная
            </summary>
        </member>
        <member name="M:AI.FLV.#ctor">
            <summary>
            Конструктор по умолчанию
            </summary>
        </member>
        <member name="M:AI.FLV.#ctor(System.Double)">
            <summary>
            Конструктор
            </summary>
            <param name="flv">численное значение нечеткой переменной</param>
        </member>
        <member name="M:AI.FLV.op_LogicalNot(AI.FLV)">
            Не 
        </member>
        <member name="M:AI.FLV.op_BitwiseAnd(AI.FLV,AI.FLV)">
            И
        </member>
        <member name="M:AI.FLV.op_BitwiseOr(AI.FLV,AI.FLV)">
            <summary>
            Или
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:AI.IntervalData">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.#ctor">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.Add(System.Int32,System.Int32)">
            <summary>
            Добавление интервала
            </summary>
            <param name="bI">Начало</param>
            <param name="eI">Конец</param>
        </member>
        <member name="M:AI.IntervalData.GetVects(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Нарезка вектора по интервалам
            </summary>
            <param name="inputVector">Input data vector</param>
        </member>
        <member name="M:AI.IntervalData.GetVect(System.Func{AI.DataStructs.Algebraic.Vector,System.Double},AI.DataStructs.Algebraic.Vector)">
            <summary>
            Нарезка вектора по интервалам + преобразование
            </summary>
            <param name="vect2doub">Функция для преобразования вектора в число</param>
            <param name="input">Input data vector</param>
        </member>
        <member name="T:AI.ML.AlgorithmAnalysis.CorrelationAnalysis">
            <summary>
            Correlation analysis (orthogonality check)
            </summary>
        </member>
        <member name="P:AI.ML.AlgorithmAnalysis.CorrelationAnalysis.CorMatrNorm">
            <summary>
            Normalized correlation matrix
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.CorrelationAnalysis.#ctor(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Correlation analysis
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.CorrelationAnalysis.MeanOrtog">
            <summary>
            Average Orthogonality Coefficient
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.CorrelationAnalysis.CorMatrDeterm">
            <summary>
            Determinant of the correlation matrix (one of the multicollinearity indicators)
            </summary>
        </member>
        <member name="T:AI.ML.AlgorithmAnalysis.SimilarityOfBases">
            <summary>
            Проверка схожести двух базисов
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.SimilarityOfBases.#ctor(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Проверка схожести двух базисов
            </summary>
            <param name="bas1">Базис №1</param>
            <param name="bas2">Базис №2</param>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.SimilarityOfBases.ProbRandBasis">
            <summary>
            Вероятность что базисы не связаны (случайны)
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.AlgorithmAnalysis.MetricsForClassification">
            <summary>
            Quality metrics for assessing classification
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.Accuracy(System.Int32[],System.Int32[])">
            <summary>
            Accuracy
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.PrecisionForEachClass(System.Int32[],System.Int32[])">
            <summary>
            Algorithm precision value for each class
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.AveragePrecision(System.Int32[],System.Int32[])">
            <summary>
            Average precision across all classes
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.ConfusionMatrix(System.Int32[],System.Int32[])">
            <summary>
            Confusion matrix (confusion)
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.Recall(System.Int32[],System.Int32[])">
            <summary>
            Recall
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.RecallForEachClass(System.Int32[],System.Int32[])">
            <summary>
            Algorithm recall value for each class
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.AverageRecall(System.Int32[],System.Int32[])">
            <summary>
            Average recall across all classes
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.FMeasure(System.Int32[],System.Int32[])">
            <summary>
            F measure formula: 2 * recall * precision / (recall + precision)
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.FMeasure(System.Int32[],System.Int32[],System.Double)">
            <summary>
            F measure formula: (1+beta^2) * recall * precision / (recall + beta^2 * precision)
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForClassification.FullReport(System.Int32[],System.Int32[],System.Double,System.Boolean)">
            <summary>
            Complete classifier metrics report
            </summary>
        </member>
        <member name="M:AI.ML.AlgorithmAnalysis.MetricsForRegression.RMSLE(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            RMLE (target[i]>-1, output[i]>-1 for all i \in [0; N-1])
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.CorrelationClassifier">
            <summary>
            Correlation classifier
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.CorrelationClassifier.Classes">
            <summary>
            Classes
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor">
            <summary>
            Correlation classifier
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(System.String)">
            <summary>
            Correlation classifier
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
            Correlation classifier
            </summary>
            <param name="classifikator"> Classes</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Adding a class
            </summary>
            <param name="features">Feature vector</param>
            <param name="num">Label </param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recognizing a vector
            </summary>
            <param name="inp">Input</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.ClassifyProbVector(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recognizing a vector, the result is a vector of probabilities
            </summary>
            <param name="inp">Input vector</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Train(AI.DataStructs.Algebraic.Vector[],System.Int32[])">
            <summary>
            Training a classifier
            </summary>
            <param name="features">Features</param>
            <param name="classes">Labels</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Train(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Training a classifier based on the vector-label dataset
            </summary>
            <param name="dataset">Vector-label dataset</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Save(System.String)">
            <summary>
            Save
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Load(System.String)">
            <summary>
            Load
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="T:AI.ML.Classifiers.IClassifier">
            <summary>
            Интерфейс для работы классификаторов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Load(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.ClassifyProbVector(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="T:AI.ML.Classifiers.KNNCl">
            <summary>
            Classifier (k-nearest neighbors method)
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.K">
            <summary>
            Number of neighbors
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.IsZipSave">
            <summary>
            Whether to zipped on save
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.H">
            <summary>
            Window width
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.FixedH">
            <summary>
            Is the width fixed
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.IsParsenMethod">
            <summary>
            Is the Parzen window in use
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.KernelParsenWindow">
            <summary>
            Parzen window Kernel
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.Dist">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.KNNCl.Classes">
            <summary>
            Dataset
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.#ctor">
            <summary>
            Classifier (Method of k-nearest neighbors)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.#ctor(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Classifier (Method of k-nearest neighbors)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.GetKNN(System.String)">
            <summary>
            Loading from csv file (features; class label)
            </summary>
            <param name="pathToEtallonClassCsv">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.RbfK(System.Double)">
            <summary>
            Radial basis kernel for the Parzen window
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.#ctor(System.String,System.Int32)">
            <summary>
            Classifier (Method of k-nearest neighbors)
            </summary>
            <param name="path">File path</param>
            <param name="n">Number of classes</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
            Classifier (Method of k-nearest neighbors)
            </summary>
            <param name="classifikator">Collection of classes</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.ToVector(System.Int32)">
            <summary>
            Transform to vector
            </summary>
            <param name="i">Index</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recognition
            </summary>
            <param name="inp">Input vector</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.AddClass(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Adding a class
            </summary>
            <param name="features">Feature vector</param>
            <param name="num">Label </param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.ClassifyProbVector(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recognizing a vector, the result is a vector of probabilities
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.RecognizeVectorMax(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Returns a vector, its length is the number of classes, the number of the required class is 1
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.Train(AI.DataStructs.Algebraic.Vector[],System.Int32[])">
            <summary>
            Training a classifier
            </summary>
            <param name="features">Features</param>
            <param name="classes">Labels</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.Train(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Training a classifier based on the vector-label dataset
            </summary>
            <param name="dataset">Vector-label dataset</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.GetBts">
            <summary>
            Converting classifier to byte array
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.FromBts(System.Byte[])">
            <summary>
            Loading from a byte array
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.Save(System.String)">
            <summary>
            Save
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.KNNCl.Load(System.String)">
            <summary>
            Load
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="T:AI.ML.Classifiers.LinClassifier">
            <summary>
            Linear classifier
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.NeuralClassifier.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNW)">
            <summary>
            
            </summary>
            <param name="net"></param>
        </member>
        <member name="M:AI.ML.Classifiers.NeuralClassifier.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Classify
            </summary>
            <param name="inp">Input vector</param>
        </member>
        <member name="M:AI.ML.Classifiers.NeuralClassifier.ClassifyProbVector(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Classify
            </summary>
            <param name="inp">Input vector</param>
        </member>
        <member name="T:AI.ML.Classifiers.NN">
            <summary>
            Classifier (method of standards)
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.NN.Classes">
            <summary>
            Classes
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor">
            <summary>
             Classifier (method of standards)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor(System.String)">
            <summary>
             Classifier (method of standards)
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
             Classifier (method of standards)
            </summary>
            <param name="classifikator"> Classes</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.AddClass(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Adding a standard to the classifier
            </summary>
            <param name="tDataset">Dataset</param>
            <param name="numClass">Index класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Recognizing a vector
            </summary>
            <param name="inp">Input</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.AddClass(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Adding a class
            </summary>
            <param name="features">Feature vector</param>
            <param name="num">Label </param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.ClassifyProbVector(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Returns a vector, the length of which is equal to the number of classes, the value at the index of the required class is set to one, and at other indices to zero.
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Save(System.String)">
            <summary>
            Save
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Load(System.String)">
            <summary>
            Load
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Train(AI.DataStructs.Algebraic.Vector[],System.Int32[])">
            <summary>
            Training a classifier
            </summary>
            <param name="features">Features</param>
            <param name="classes">Labels</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Train(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Training a classifier based on the vector-label dataset
            </summary>
            <param name="dataset">Vector-label dataset</param>
        </member>
        <member name="T:AI.ML.Classifiers.StructClasses">
            <summary>
            Структура классификатора
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.StructClasses.FromBts(System.Byte[])">
            <summary>
            Загрузка из массива байт
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.StructClasses.GetBts">
            <summary>
            Сохранение в массив байт
            </summary>
        </member>
        <member name="T:AI.ML.Clustering.Cluster">
            <summary>
            Cluster structure
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.Cluster.Dataset">
            <summary>
            Dataset
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.Cluster.Centr">
            <summary>
            Cluster center
            </summary>
        </member>
        <member name="T:AI.ML.Clustering.Forel">
            <summary>
            FOREL clustering
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.Forel.Clusters">
            <summary>
            Clusters array
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.Forel.DistanceFunction">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.Forel.#ctor">
            <summary>
            FOREL clustering
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.Forel.Train(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Clustering training
            </summary>
            <param name="dataset">Vectors</param>
            <param name="minR">Minimum cluster radius</param>
        </member>
        <member name="M:AI.ML.Clustering.Forel.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Classify vector
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.Forel.Classify(System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.Vector})">
            <summary>Classify vectors</summary>
            <param name="vectors">Vectors</param>
        </member>
        <member name="M:AI.ML.Clustering.Forel.GetHypersphere(System.Double,AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Проводит гиперсферу нужного радиуса из конкретной точки и на заданном множестве
            </summary>
            <param name="R">Радиус</param>
            <param name="m">Центр масс</param>
            <param name="pointsSet">Множество точек</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clustering.Forel.Max(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Максимальная дистанция
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clustering.Forel.AWithOutB(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Множество А\В
            </summary>
            <param name="A">Множество А</param>
            <param name="B">Множество В</param>
            <returns>А\B</returns>
        </member>
        <member name="T:AI.ML.Clustering.IClustering">
            <summary>
            Interface for metric clustering algorithms
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.IClustering.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Classify vector
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.IClustering.Classify(System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.Vector})">
            <summary>
            Classify vectors
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.IClustering.Train(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Clustering training
            </summary>
            <param name="dataset">Vectors</param>
            <param name="param">Free parametr</param>
        </member>
        <member name="P:AI.ML.Clustering.IClustering.DistanceFunction">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.IClustering.Clusters">
            <summary>
            Clusters array
            </summary>
        </member>
        <member name="T:AI.ML.Clustering.KMeans">
            <summary>Алгоритм k-means</summary>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.MaxCount">
            <summary>
            Максимальное число циклов
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.#ctor(System.Int32)">
            <summary>K-Mean</summary>
            <param name="clasterCount">Количество кластеров</param>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.GroupCount">
            <summary>Количество кластеров</summary>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.DimentionOfData">
            <summary>Размерность данных</summary>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.Сentroids">
            <summary>Цендроиды кластеров</summary>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.DistanceFunction">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.KMeans.Clusters">
            <summary>
            Clusters array
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>Classify vector</summary>
            <param name="vector">Vector</param>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.Classify(System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.Vector})">
            <summary>Classify vectors</summary>
            <param name="vectors">Vectors</param>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.Train(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Clustering training
            </summary>
            <param name="dataset">Vectors</param>
            <param name="seed">Seed</param>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.Initialize">
            <summary>Инизиализация</summary>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.NearestVector(AI.DataStructs.Algebraic.Vector)">
            <summary>Ближайший вектор</summary>
        </member>
        <member name="M:AI.ML.Clustering.KMeans.ValidateData(System.Int32,AI.DataStructs.Algebraic.Vector[])">
            <summary>Validate the sample</summary>
        </member>
        <member name="T:AI.ML.Clustering.KohonenNet">
            <summary>
            Kohonen self-organizing map
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.KohonenNet.Steps">
            <summary>
            Neural network setup steps
            </summary>
        </member>
        <member name="P:AI.ML.Clustering.KohonenNet.Clusters">
            <summary>
            Clusters array
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.KohonenNet.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Kohonen self-organizing map
            </summary>
        </member>
        <member name="M:AI.ML.Clustering.KohonenNet.Classify(AI.DataStructs.Algebraic.Vector)">
            <summary>Classify vector</summary>
            <param name="vector">Vector</param>
        </member>
        <member name="M:AI.ML.Clustering.KohonenNet.Classify(System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.Vector})">
            <summary>Classify vectors</summary>
            <param name="vectors">Vectors</param>
        </member>
        <member name="T:AI.ML.CrossCorrMatrix">
            <summary>
            Cross-correlation matrix
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.Base.Many2ManyVectorClassifier">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.Base.Many2ManyVectorClassifier.Labels">
            <summary>
            Class labels
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.Base.Many2ManyVectorClassifier.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifier.#ctor">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifier.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.IAlgebraicStructure})">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
            <param name="labels">Class labels</param>
            <param name="features"></param>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifier.GetDataset(System.Collections.Generic.IEnumerable{AI.ML.Datasets.Base.Many2ManyVectorClassifier},System.Boolean)">
            <summary>
            Getting a dataset, for use with a neural network manager
            </summary>
            <param name="data">Dataset</param>
            <param name="isShuffling">Whether it is necessary to shuffle the data in random order</param>
        </member>
        <member name="T:AI.ML.Datasets.Base.Many2ManyVectorClassifierDataset">
            <summary>
            Dataset containing an array of sequences for training recurrent neural networks
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifierDataset.GetLabels">
            <summary>
            The method returns an array of lists(an array of sequences) of class labels
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifierDataset.GetFeatures">
            <summary>
            The method returns an array of lists(an array of sequences) of feature vectors
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifierDataset.GetVectorLabels(System.Int32)">
            <summary>
            The method returns an array of lists(an array of sequences) of class labels in vector representation
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.Base.Many2ManyVectorClassifierDataset.ShufflingDataset">
            <summary>
            Uniform shuffling
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.DataSetSingle.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetSingle.Init(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="T:AI.ML.Datasets.ExtensionOfFeatureSpace">
            <summary>
            Расширение пространства признаков
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="x">Input</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="inp">Input</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="x">Input</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sin(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами 
            </summary>
            <param name="x">Input</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.SinCos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами и косинусами
            </summary>
            <param name="x">Input</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="inp">Input</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(AI.DataStructs.Algebraic.Vector,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Input</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(System.Double,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Input</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.GaussRBF(System.Double,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Радиально-базисная ф-я Гаусса
            </summary>
            <param name="x">Input</param>
            <param name="centers">Массив центров</param>
            <param name="std">СКО</param>
            <returns>Вектор значений от 0 до 1</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sinc(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Синус Котельникова sin(x)/x
            </summary>
            <param name="x"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.Img2Img">
            <summary>
            Датасет для преобразования картинки в картинку
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.Img2ImgEl">
            <summary>
            Элемент датасета для преобразования картинки в картинку
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.Img2ImgEl.InputImg">
            <summary>
            Входное изображение
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.Img2ImgEl.TargetImg">
            <summary>
            Целевое изображение
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.MatrixInt">
            <summary>
            Датасет с картинками матрица-нормер класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.MatrixInt.GetRandMatrixIntSemple">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.MatrixIntSemple">
            <summary>
            Элемент датасета (матрица - номер класса)
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.MatrixIntSemple.matrix">
            <summary>
            Матрица
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.MatrixIntSemple.classNum">
            <summary>
            Номер класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.MatrixIntSemple.#ctor">
            <summary>
            Элемент датасета (матрица - номер класса)
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.MatrixIntSemple.#ctor(AI.DataStructs.Algebraic.Matrix,System.Int32)">
            <summary>
            Элемент датасета (матрица - номер класса)
            </summary>
            <param name="matr">Матрица</param>
            <param name="numClass">Номер класса</param>
        </member>
        <member name="T:AI.ML.Datasets.MatrixVector">
            <summary>
            Коллекция(датасет) матрица-вектор
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.MatrixVector.MatrixVectorSempleRand">
            <summary>
            random instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.MatrixVectorSemple">
            <summary>
            Матрица-вектор
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.MatrixVectorSemple.matrix">
            <summary>
            Матрица
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.MatrixVectorSemple.vector">
            <summary>
            Вектор
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.MatrixVectorSemple.#ctor(AI.DataStructs.Algebraic.Matrix,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Матрица-вектор
            </summary>
            <param name="matr">Матрица</param>
            <param name="vect">Вектор</param>
        </member>
        <member name="T:AI.ML.Datasets.SignalProcessingDataset">
            <summary>
            Dataset for DSP tasks
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.SignalProcessingDataset.#ctor(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for DSP tasks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.Datasets.SignalProcessingDataset.Init(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="T:AI.ML.Datasets.SyntheticDatasets.PointClouds">
            <summary>
            Point clouds synthesis
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.SyntheticDatasets.PointClouds.Dimention">
            <summary>
            Dimention
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.SyntheticDatasets.PointClouds.#ctor(System.Int32)">
            <summary>
            Point cloud synthesis
            </summary>
            <param name="dim">Dimention</param>
        </member>
        <member name="M:AI.ML.Datasets.SyntheticDatasets.PointClouds.AddCloud(System.Int32,AI.DataStructs.Algebraic.Vector,AI.ML.Datasets.SyntheticDatasets.PointClouds.CloudType,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Add point cloud
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.SyntheticDatasets.PointClouds.GetArray">
            <summary>
            Output as an array
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.SyntheticDatasets.PointClouds.CloudType">
            <summary>
            Point cloud type
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.SyntheticDatasets.PointClouds.CloudType.Hypersphere">
            <summary>
            Hypersphere
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.SyntheticDatasets.PointClouds.CloudType.Hypercube">
            <summary>
            Hypercube 
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.VectorClass">
            <summary>
            Представляет структуру вектор-класс
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorClass.Features">
            <summary>
            Вектор для классификации
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorClass.ClassMark">
            <summary>
            Метка класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorClass.#ctor(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Представляет структуру вектор-класс
            </summary>
            <param name="vector">Вектор</param>
            <param name="mark">Метка класса</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorClass.FromBts(System.Byte[])">
            <summary>
            Чтение данных класса из массива байт
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorClass.GetBts">
            <summary>
            Преобразование данных класса в массив байт 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.VectorIntDataset">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.mean">
            <summary>
            Средний вектор
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.disp">
            <summary>
            Дисперсия по выборке
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor(System.String)">
            <summary>
            Загрузка датасета из файла
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor(System.Int32)">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetRandomData">
            <summary>
            Случайный представитель датасета
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CorrMatrFeatures">
            <summary>
            Корреляционная матрица признаков
            </summary>
            <returns>Нормированная кор. матрица</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.DispMeanResult">
            <summary>
            Получение вектора дисперсии и среднего вектора
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Normalise">
            <summary>
            Нормализация датасета
            </summary>
            <returns>Датасет</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetDatasetDelSim(System.Double)">
            <summary>
            Удаление похожих векторов из разных классов
            </summary>
            <param name="simCoef">Коэффициент схожести</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Save(System.String,System.Char)">
            <summary>
            Сохранение датасета
            </summary>
        </member>
        <member name="T:AI.ML.Distances.BaseDist">
            <summary>
            Basic distance functions
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.LpDist(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure,System.Int32)">
            <summary>
            Lp family distances
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.EuclideanDistance(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Euclidean distance
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.LinfDist(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Distance L-infinity
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.Cos(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Cosine similarity
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.CosDist(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Cosine distance
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.SquareEucl(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Square of Euclidean distance
            </summary>
        </member>
        <member name="M:AI.ML.Distances.BaseDist.ManhattanDistance(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Square of Euclidean distance
            </summary>
        </member>
        <member name="T:AI.ML.Distances.DistancesBetweenDistributions">
            <summary>
            Distances between distributions
            </summary>
        </member>
        <member name="T:AI.ML.Distances.DistancesIntoAccountDistributions">
            <summary>
            Distances between points taking into account distributions, or distances from a point to a distribution.
            </summary>
        </member>
        <member name="T:AI.ML.Distances.ProbabilityDistances">
            <summary>
            Probability (entropy) distances
            </summary>
        </member>
        <member name="M:AI.ML.Distances.ProbabilityDistances.DKL(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Kullback–Leibler divergence
            </summary>
        </member>
        <member name="M:AI.ML.Distances.ProbabilityDistances.DKLSymmetrical(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Symmetrical Kullback - Leibler divergence
            </summary>
        </member>
        <member name="T:AI.ML.Genetic.GeneticCore.Cell">
            <summary>
            Клетка
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Score">
            <summary>
            Набранные очки
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Parametrs">
            <summary>
            Параметры (хромосомы)
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Function">
            <summary>
            Полезная функция
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Cell.#ctor(System.Int32,System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector},System.Random,System.Double,System.Double)">
            <summary>
            Клетка
            </summary>
            <param name="parametrsCount">Number of parameters</param>
            <param name="function">Функция</param>
            <param name="rnd">Pseudo-random number generator</param>
            <param name="valDown">Нижняя граница распределения</param>
            <param name="valUp">Верхняя граница распределения</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Cell.Output(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Выход модели
            </summary>
            <param name="inpVector">Входной вектор</param>
        </member>
        <member name="T:AI.ML.Genetic.GeneticCore.Population">
            <summary>
            Cell population
            </summary>
        </member>
        <member name="F:AI.ML.Genetic.GeneticCore.Population.mutProb">
            <summary>
            Mutation probability
            </summary>
        </member>
        <member name="F:AI.ML.Genetic.GeneticCore.Population.k">
            <summary>
            Crossover point
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.LiderCount">
            <summary>
            Number of leaders to breed
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.MutationValue">
            <summary>
            Mutation value
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.DValueUp">
            <summary>
            Search upper bound
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.DValueDown">
            <summary>
            Search lower bound
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.#ctor(System.Int32,System.Int32,System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector},AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],System.Double,System.Double)">
            <summary>
            Population
            </summary>
            <param name="countCell">Number of cells</param>
            <param name="countParam">Number of parameters</param>
            <param name="function">Utility function</param>
            <param name="inp">Input vectors</param>
            <param name="outp">Output vectors</param>
            <param name="valDown">Search lower bound</param>
            <param name="valUp">Search upper bound</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.#ctor(System.Int32,System.Int32,System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector},AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Population
            </summary>
            <param name="countCell">Number of cells</param>
            <param name="countParam">Number of parameters</param>
            <param name="function">Utility function</param>
            <param name="inp">Input data vector</param>
            <param name="outp">Output vector</param>
            <param name="valDown">Search lower bound</param>
            <param name="valUp">Search upper bound</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.CellOut(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
             Passing a function from one variable
            </summary>
            <param name="inp">Vector of inputs</param>
            <param name="indCell">Cell number</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Epoch(System.Int32)">
            <summary>
            Epoch of cells
            </summary>
            <param name="count">Number of children</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Score(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Points for one example
            </summary>
            <param name="outp">Model output</param>
            <param name="targ">Target value</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.SortCells">
            <summary>
            Sotrting
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Mutation(AI.ML.Genetic.GeneticCore.Cell)">
            <summary>
            Cell mutation
            </summary>
            <param name="input">Original cell</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Cross(AI.ML.Genetic.GeneticCore.Cell,AI.ML.Genetic.GeneticCore.Cell)">
            <summary>
            Cell crossing
            </summary>
            <param name="par1">First parent</param>
            <param name="par2">Second parent</param>
        </member>
        <member name="T:AI.ML.GradientDecentDataset">
            <summary>
            Класс для хранения обучающей выборки для градиентного спуска
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.X">
            <summary>
            Набор векторов "Х"
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.Y">
            <summary>
            Набор векторов "Y"
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector})">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
            <param name="xVector">Набор векторов "Х"</param>
            <param name="yVector">Набор векторов "Y"</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Вектор у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(System.Double,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">переменная х</param>
            <param name="y">переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Clear">
            <summary>
            Очистка данных
            </summary>
        </member>
        <member name="T:AI.ML.GradientDecent">
            <summary>
            Градиентный спуск
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Step">
            <summary>
            Шаг для вычисления частных производных и градиента
            (чем он меньше, тем точнее вычисление частных производных)
            по умолчанию step 1e-7
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.GdDataset">
            <summary>
            Обучающая выборка
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Parammetrs">
            <summary>
            Вектор оптимизируемых парамметров
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Function">
            <summary>
            Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Norm">
            <summary>
            Норма обучения, по умолчанию 0.002
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Itterations">
            <summary>
            Кол-во иттераций, по умолчанию 30
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.#ctor(AI.DataStructs.Algebraic.Vector,System.Func{AI.DataStructs.Algebraic.Vector,System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Double},AI.ML.GradientDecentDataset)">
            <summary>
            Создание объекта Градиентный спуск
            </summary>
            <param name="param">Вектор оптимизируемых парамметров</param>
            <param name="function">Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)</param>
            <param name="gdd">Обучающая выборка</param>
        </member>
        <member name="M:AI.ML.GradientDecent.DecentIter">
            <summary>
            Одна иттерация спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.Decent">
            <summary>
            Синхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.AsyncDecent">
            <summary>
            Асинхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.PartialDerivatives(AI.DataStructs.Algebraic.Vector,System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Func{AI.DataStructs.Algebraic.Vector,System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector},System.Double})">
            <summary>
            Частные производные
            </summary>
            <param name="param">Начальный вектор параметров(точка)</param>
            <param name="function">Целевая функция(принимает вектор параметров, выдает результирующее значение)</param>
             <param name="inp"> Вектора входа</param>
              <param name="ideal"> Ideal outputs</param>
            <returns>Возвращает вектор частных производных</returns>
        </member>
        <member name="T:AI.ML.HMM.HMM">
            <summary>
            Basic block for constructing hidden Markov models, Markov chain
            </summary>
        </member>
        <member name="F:AI.ML.HMM.HMM.stateMatrix">
            <summary>
            State Matrix
            </summary>
        </member>
        <member name="F:AI.ML.HMM.HMM.stateAlter">
            <summary>
            Inverted state matrix
            </summary>
        </member>
        <member name="M:AI.ML.HMM.HMM.#ctor">
            <summary>
            Markov chain
            </summary>
        </member>
        <member name="M:AI.ML.HMM.HMM.Train(System.Int32[])">
            <summary>
            Train
            </summary>
            <param name="trainSeq">Training sequence</param>
        </member>
        <member name="M:AI.ML.HMM.HMM.GetMax(System.Double[0:,0:])">
            <summary>
            Maximum transition probability
            </summary>
            <param name="matrix">State Matrix</param>
        </member>
        <member name="M:AI.ML.HMM.HMM.Generate(System.Int32,System.Int32)">
            <summary>
            Generating text
            </summary>
            <param name="num">Steps count</param>
            <param name="begin">The first word</param>
        </member>
        <member name="T:AI.ML.HMM.MChWords">
            <summary>
            Markov chain
            </summary>
        </member>
        <member name="F:AI.ML.HMM.MChWords.stateMatrix">
            <summary>
            State Matrix
            </summary>
        </member>
        <member name="F:AI.ML.HMM.MChWords.stateAlter">
            <summary>
            Inverted state matrix
            </summary>
        </member>
        <member name="M:AI.ML.HMM.MChWords.#ctor">
            <summary>
            Markov chain
            </summary>
        </member>
        <member name="M:AI.ML.HMM.MChWords.Train(System.String)">
            <summary>
            Train
            </summary>
            <param name="TrainText">Training text</param>
        </member>
        <member name="M:AI.ML.HMM.MChWords.GetMax(System.Double[0:,0:])">
            <summary>
            Maximum transition probability
            </summary>
            <param name="matrix">State Matrix</param>
        </member>
        <member name="M:AI.ML.HMM.MChWords.Generate(System.Int32,System.String)">
            <summary>
            Generating text
            </summary>
            <param name="num">How many words</param>
            <param name="begin">The first word</param>
        </member>
        <member name="T:AI.ML.HMM.KMeanHMM">
            <summary>
            Hidden Markov model with state extraction based on the k-means algorithm
            </summary>
        </member>
        <member name="P:AI.ML.HMM.KMeanHMM.KMean">
            <summary>
            Extractor based on the k-means algorithm
            </summary>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.#ctor(System.Int32)">
            <summary>
            Hidden Markov model with state extraction based on the k-means algorithm
            </summary>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.GetTransitionMatrix(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Obtaining a matrix of probabilities of transitions between states
            </summary>
            <param name="seq">sequence of vectors</param>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.GetTransitionVector(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Obtaining a vector of probabilities of transitions between states
            </summary>
            <param name="seq">Sequence of vectors</param>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.Train(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Model training
            </summary>
            <param name="seqInp">Sequence of vectors</param>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.TrainHMM(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Only Markov chein train
            </summary>
            <param name="seqInp">Sequence of vectors</param>
        </member>
        <member name="M:AI.ML.HMM.KMeanHMM.Generate(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Generating a sequence of states
            </summary>
            <param name="start">Start vector</param>
            <param name="len">Sequence length</param>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.IRandomizableLayer.Random">
            <summary>
            Random object for the layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.IActivatableLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer">
            <summary>
            Layer interface
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer.OnlyUse">
            <summary>
            Only use mode
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILearningLayer">
            <summary>
            Trainable layers
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILearningLayer.InitWeights(System.Random)">
            <summary>
            Initialize layer weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILearningLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.IRecurrentLayer">
            <summary>
            Interface for recurrent layers
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Base.IRecurrentLayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate">
            <summary>
            Data aggregation layer (Calculates average)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.#ctor">
            <summary>
            Data aggregation layer (Calculates average)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Data aggregation layer (Calculates average)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Agregate.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization">
            <summary>
             BatchReNormalization (Normalization of inputs during online learning)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.#ctor">
            <summary>
             BatchReNormalization (Normalization of inputs during online learning)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.BatchReNormalization.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.WRe">
            <summary>
            Weighting matrix
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.WIm">
            <summary>
            Weighting matrix
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.BiasRe">
            <summary>
            Hyperplane displacement vector (neuron polarization)
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.BiasIm">
            <summary>
            Hyperplane displacement vector (neuron polarization)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Полносвязный слой
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Число выходов</param>
            <param name="f">Activation function</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.#ctor(System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Полносвязный слой
            </summary>
            <param name="outputDimension">Число выходов</param>
            <param name="f">Activation function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ComplexLayers.FeedComplexLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D">
            <summary>
            One-dimensional convolutional layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.IsSame">
            <summary>
            Whether the dimension of the input is preserved
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.AddDenInSqrt">
            <summary>
            Adding a value to the denominator under the root when initializing the weights
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Int32,System.Random,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            One-dimensional convolutional layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.#ctor(System.Int32,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            One-dimensional convolutional layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.InitWeights(System.Random)">
            <summary>
            Initialize layer weights
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.GetParameters">
            <summary>
            Generating a neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.Conv1D.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D">
            <summary>
            One-dimensional upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.AddDenInSqrt">
            <summary>
            Adding a value to the denominator under the root when initializing the weights
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.#ctor(System.Int32)">
            <summary>
            One-dimensional upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32)">
            <summary>
            One-dimensional upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvDeconv.UpSampling1D.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer">
            <summary>
            Convolutional layer of neural network
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.FilterStrucuture">
            <summary>
            Filter structure
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.StrideX">
            <summary>
            X-axis stride
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.StrideY">
            <summary>
            Y-axis stride
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.PaddingX">
            <summary>
            Padding X-axis
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.PaddingY">
            <summary>
            Padding Y-axis
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.IsSame">
            <summary>
            Whether the dimension of the input is preserved
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.Numerator">
            <summary>
            Initializer numerator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.AddDenInSqrt">
            <summary>
            Adding a value to the denominator under the root when initializing the weights
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.Bias">
            <summary>
            Offset weights
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.Filters">
            <summary>
            Filter tensors
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Convolutional layer
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
            <param name="filterStruct">Структура фильтров</param>
            <param name="func">Activation function</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Convolutional layer
            </summary>
            <param name="filterStruct">Структура фильтров</param>
            <param name="func">Activation function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convolutional layer
            </summary>
            <param name="func">Activation function</param>
            <param name="count">Число фильтров</param>
            <param name="h">Высота фильтра</param>
            <param name="w">Ширина фильтра</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.GeneratorW(System.Random,System.Double)">
            <summary>
            Setting up the random number generator initializer
            </summary>
            <param name="random">Pseudo-random number generator</param>
            <param name="addDenumInSqrt">Adding a value to a radical expression in the denominator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.InitWeights(System.Random)">
            <summary>
            Initialize layer weights
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.RestOutShape">
            <summary>
            Обновление размера выхода
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionalLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct">
            <summary>
            Convolutional network filter structure
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterW">
            <summary>
            Filter width
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterH">
            <summary>
            Filter height
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterCount">
            <summary>
            Number of filters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.Volume">
            <summary>
            Product of height by width and number of filters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
            <param name="gain">Усиление градиента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D">
            <summary>
            One-dimensional subsampling layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.AddDenInSqrt">
            <summary>
            Adding a value to the denominator under the root when initializing the weights
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32)">
            <summary>
            Subsampling (Maxpooling 1D)
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
            <param name="k">How many times to compress out</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.#ctor(System.Int32)">
            <summary>
            Subsampling (Maxpooling 1D)
            </summary>
            <param name="k">How many times to compress out</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPool1D.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling">
            <summary>
            Макспуллинг
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Int32)">
            <summary>
            Subsampling (Maxpooling 2D)
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
            <param name="h">How many times to compress out in height</param>
            <param name="w">How many times to compress in width</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.#ctor(System.Int32,System.Int32)">
            <summary>
            Subsampling (Maxpooling 2D) 
            </summary>
            <param name="h">How many times to compress out in height</param>
            <param name="w">How many times to compress in width</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape">
            <summary>
            Слой изменения формы тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.TrainableParameters">
            <summary>
            Число тренировочных параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.AddDenInSqrt">
            <summary>
            Добавление в знаменатель
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Слой изменения формы тензора
            </summary>
            <param name="inputShape">Начальная форма</param>
            <param name="newShape">Новая форма</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Слой изменения формы тензора
            </summary>
            <param name="inputShape">Начальная форма</param>
            <param name="newShape">Новая форма</param>
            <param name="gain">Усиление градиента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Слой изменения формы тензора
            </summary>
            <param name="newShape">Новая форма</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ReShape.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic">
            <summary>
            Upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.InputShape">
            <summary>
            Dimension and shape of the input tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.AddDenInSqrt">
            <summary>
            Adding a value to the denominator under the root when initializing the weights
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Int32)">
            <summary>
            Upsampling with bicubic interpolation
            </summary>
            <param name="inputShape">Dimension and shape of the input tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.#ctor(System.Int32,System.Int32)">
            <summary>
            Upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Direct network pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Automatic differentiation graph</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.UpSampling2DBicubic.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer">
            <summary>
            Copy layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.#ctor(System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Copy layer
            </summary>
            <param name="count">Number of copies</param>
            <param name="act">Non-linear function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32)">
            <summary>
            Слой копирования
            </summary>
            <param name="inpShape">Input dimension</param>
            <param name="count">Число копмрований</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.CopyistLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut">
            <summary>
            DropOut layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.Random">
            <summary>
            Random object for the layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.#ctor(System.Single)">
            <summary>
            Dropout layer
            </summary>
            <param name="dropProb">Probability of disconnection with a neuron</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.DropOut.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer">
            <summary>
            Fully connected forward propagation layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.W">
            <summary>
            Weighting matrix
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Bias">
            <summary>
            Hyperplane displacement vector (neuron polarization)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(System.Int32,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Fully connected layer
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="f">Activation function</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Fully connected layer
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="f">Activation function</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Fully connected layer
            </summary>
            <param name="outputDimension">Output dimension</param>
            <param name="f">Activation function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer">
            <summary>
            Linear layer without bias
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Linear layer without bias
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Double,System.Random)">
            <summary>
            Linear layer without bias
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(System.Int32)">
            <summary>
            Linear layer without bias
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer">
            <summary>
            Nonlinear layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.TrainableParameters">
            <summary>
            Number of training parameters (0)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.AddDenInSqrt">
            <summary>
            Adding under the root (0)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Activation layer
            </summary>
            <param name="shapeInp">Input dimension</param>
            <param name="activation">Activation function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Activation layer
            </summary>
            <param name="activation">Activation function</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass слоя
            </summary>
            <param name="input">Входной тензор</param>
            <param name="g">Graph of automatic differentiation</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ActivationLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer">
            <summary>
            Layer for training and creating embedding vectors
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.#ctor(System.Int32,System.Int32)">
            <summary>
            Layer for training and creating embedding vectors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.#ctor(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Layer for training and creating embedding vectors (initialization with pre-trained vectors)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.InitWeights(System.Random)">
            <summary>
            Initialize layer weights
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.EmbedingLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell">
            <summary>
            Обучаемый БИХ-фильтр
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.InputShape">
            <summary>
            Размерность входа
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.OutputShape">
            <summary>
            Размерность выхода
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.AddDenInSqrt">
            <summary>
            Добавление для расчета весов
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.Random">
            <summary>
            Random initialization for the layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.A">
            <summary>
            a - Коэффициенты фильтра
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.B">
            <summary>
            b - Коэффициенты фильтра
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Обучаемый нейрофильтр
            </summary>
            <param name="aL">Коэф. а</param>
            <param name="bL">Коэф. б</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Обучаемый нейрофильтр
            </summary>
            <param name="aL">Коэф. а</param>
            <param name="bL">Коэф. б</param>
            <param name="random">Random</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass (фильтрация)
            </summary>
            <param name="input"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.GetParameters">
            <summary>
            Получение параметров
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.InitWeights(System.Random)">
            <summary>
            Not used
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterCell.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer">
            <summary>
            Обучаемый банк фильтров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.AddDenInSqrt">
            <summary>
            Adding under the root
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.TrainableParameters">
            <summary>
            Teachable parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.FilterCells">
            <summary>
            Фильтры
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Int32,System.Int32)">
            <summary>
            Обучаемый банк фильтров
            </summary>
            <param name="activation">Activation function</param>
            <param name="aL">Коэф. а</param>
            <param name="bL">Коэф. б</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.#ctor(System.Int32,System.Int32)">
            <summary>
            Обучаемый банк фильтров
            </summary>
            <param name="aL">Коэф. а</param>
            <param name="bL">Коэф. б</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.#ctor(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Обучаемый банк фильтров
            </summary>
            <param name="countF"></param>
            <param name="aL"></param>
            <param name="bL"></param>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прохождение банка
            </summary>
            <param name="input">Input</param>
            <param name="g">Граф</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.InitWeights(System.Random)">
            <summary>
            Инициализация
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.GetParameters">
            <summary>
            Получение обучаемых параметров
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer">
            <summary>
            Слой GRU
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.TrainableParameters">
            <summary>
            Обучаемые параметры
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Слой GRU
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Random)">
            <summary>
            Слой GRU
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.#ctor(System.Int32)">
            <summary>
            Слой GRU
            </summary>
            <param name="outputDimension">Output dimension</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.InitWeights(System.Random)">
            <summary>
            Generating weight coefficients of a neural network layer
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRULayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression">
            <summary>
            Слой GRU
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.TrainableParameters">
            <summary>
            Обучаемые параметры
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Слой GRU
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Random)">
            <summary>
            Слой GRU
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.#ctor(System.Int32)">
            <summary>
            Слой GRU
            </summary>
            <param name="outputDimension">Output dimension</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.InitWeights(System.Random)">
            <summary>
            Generating weight coefficients of a neural network layer
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.GRURegression.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer">
            <summary>
            Long short-term memory(LSTM) layer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.#ctor(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.#ctor(System.Int32)">
            <summary>
            Long short-term memory(LSTM) layer
            </summary>
            <param name="outputDimension">Output dimension</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.InitWeights(System.Random)">
            <summary>
            Generating weight coefficients of a neural network layer
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1">
            <summary>
            Long short-term memory(LSTM) layer (inpGate = 1.0 - forgetGate)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.#ctor(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer (inpGate = 1.0 - forgetGate)
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer (inpGate = 1.0 - forgetGate)
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.#ctor(System.Int32)">
            <summary>
            Long short-term memory(LSTM) layer
            </summary>
            <param name="outputDimension">Output dimension</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.InitWeights(System.Random)">
            <summary>
            Generating weight coefficients of a neural network layer
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerL1.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection">
            <summary>
            Long short-term memory(LSTM) layer peephole connection
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.#ctor(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer peephole connection
            </summary>
            <param name="inputDimension">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Double,System.Random)">
            <summary>
            Long short-term memory(LSTM) layer peephole connection
            </summary>
            <param name="inputShape">Input dimension</param>
            <param name="outputDimension">Output dimension</param>
            <param name="initParamsStdDev">Standard deviation</param>
            <param name="rnd">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.#ctor(System.Int32)">
            <summary>
            Long short-term memory(LSTM) layer peephole connection
            </summary>
            <param name="outputDimension">Output dimension</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.InitWeights(System.Random)">
            <summary>
            Generating weight coefficients of a neural network layer
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LSTMLayerPeepholeConnection.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer">
            <summary>
            Простая рекурентная сеть
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.AddDenInSqrt">
            <summary>
            Adding to the denominator
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.ActivationFunction">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.#ctor(System.Int32,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Double,System.Random)">
            <summary>
            Простая рекурентная сеть
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Double,System.Random)">
            <summary>
            Простая рекурентная сеть
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.#ctor(System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Простая рекурентная сеть
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.ResetState">
            <summary>
            Resetting the state of the neural network layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.InitWeights(System.Random)">
            <summary>
            Generating weights
            </summary>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.ToString">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.RNNLayer.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Events.ReportType">
            <summary>
            Report type
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier.Labels">
            <summary>
            Class labels
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier.#ctor">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{AI.DataStructs.Algebraic.IAlgebraicStructure})">
            <summary>
            Sequence for training a recurrent network on a many-to-many basis
            </summary>
            <param name="labels">Class labels</param>
            <param name="features"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier.GetDataset(System.Collections.Generic.IEnumerable{AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifier},System.Boolean)">
            <summary>
            Getting a dataset, for use with a neural network manager
            </summary>
            <param name="data">Dataset</param>
            <param name="isShuffling">Whether it is necessary to shuffle the data in random order</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifierDataset">
            <summary>
            Dataset containing an array of sequences for training recurrent neural networks
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifierDataset.GetLabels">
            <summary>
            The method returns an array of lists(an array of sequences) of class labels
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifierDataset.GetFeatures">
            <summary>
            The method returns an array of lists(an array of sequences) of feature vectors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifierDataset.GetVectorLabels(System.Int32)">
            <summary>
            The method returns an array of lists(an array of sequences) of class labels in vector representation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.Base.Many2ManyVectorClassifierDataset.ShufflingDataset">
            <summary>
            Uniform shuffling
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.#ctor(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetNoReccurent.Init(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.#ctor(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for training recurrent neural networks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetReccurent.Init(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetSingle.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for non-recurrent neural networks
            </summary>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.DataSetSingle.Init(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Datasets.SignalProcessingDataset">
            <summary>
            Dataset for DSP tasks
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.SignalProcessingDataset.#ctor(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Dataset for DSP tasks
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
            <param name="los">Loss function</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Datasets.SignalProcessingDataset.Init(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.NNValue}[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Class initialization
            </summary>
            <param name="inputs">Input data</param>
            <param name="outputs">Ideal outputs</param>
            <param name="los">Loss</param>
            <param name="valSplit">Fraction of the sample to be used for validation</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.AbsUnit">
            <summary>
            Activation function в виде модуля
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.AbsUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.AbsUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.AbsUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.AbsUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.ArcTanUnit">
            <summary>
            Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.ArcTanUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ArcTanUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ArcTanUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ArcTanUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.EliotSigUnit">
            <summary>
            Activation function EliotSig
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.EliotSigUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.EliotSigUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.EliotSigUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.EliotSigUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.GaussianRbfUnit">
            <summary>
            Радиально-базисная активационная ф-я
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.GaussianRbfUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.GaussianRbfUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.GaussianRbfUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.GaussianRbfUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation">
            <summary>
            Интерфейс актив. функций
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Numerator">
            <summary>
            Initializer numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit">
            <summary>
            Линейная активационная функция
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.#ctor">
            <summary>
            Линейная активационная функция
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Forward(System.Single)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU">
            <summary>
            Активационная ф-я PLU (двусторонний ограничитель)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.#ctor">
            <summary>
            Активационная ф-я PLU (двусторонний ограничитель)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.#ctor(System.Single,System.Single)">
            <summary>
            Активационная ф-я PLU (двусторонний ограничитель)
            </summary>
            <param name="slope">Наклон за линейным участком</param>
            <param name="max">Максимальное значение линейного участка</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.PLU.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU">
            <summary>
            Активация ReLU
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.#ctor">
            <summary>
            Активация ReLU
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.#ctor(System.Single)">
            <summary>
            Активация ReLU
            </summary>
            <param name="slope">Наклон при x меньше 0 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.#ctor(System.Double)">
            <summary>
            Активация ReLU
            </summary>
            <param name="slope">Наклон при x меньше 0 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.ToString">
            <summary>
            Имя актив ф.-ии
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit">
            <summary>
            Сигмоидальная Activation function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.#ctor">
            <summary>
            Сигмоидальная Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.ToString">
            <summary>
            Имя функции
            </summary>
            <returns></returns>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidWithBCE.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidWithBCE.#ctor">
            <summary>
            Сигмоидальная Activation function
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidWithBCE.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidWithBCE.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidWithBCE.ToString">
            <summary>
            Имя функции
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit">
            <summary>
            Синусоидальная активационная фукция
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit.#ctor">
            <summary>
            Синусоидальная активационная фукция
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SineUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit">
            <summary>
            Софтмакс активация
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.ToString">
            <summary>
            Имя функции активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SqnlUnit">
            <summary>
            SQN Активация
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SqnlUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SqnlUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SqnlUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SqnlUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SQRBFUnit">
            <summary>
            Радиально-базискная ф-я активации
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SQRBFUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SQRBFUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SQRBFUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SQRBFUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit">
            <summary>
            Activation function hyperbolic tangent
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Numerator">
            <summary>
            Random number generator setting numerator
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.#ctor">
            <summary>
            Activation function hyperbolic tangent
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Forward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Bakward pass
            </summary>
            <param name="x">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.ToString">
            <summary>
            Activation function name
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence">
            <summary>
            Sequence data (for recurrent networks)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.Steps">
            <summary>
            Sequence of steps
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.#ctor">
            <summary>
            Sequence data (for recurrent networks)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.#ctor(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep})">
            <summary>
            Sequence data (for recurrent networks)
            </summary>
            <param name="steps">Collection of steps</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet">
            <summary>
            Neural network training dataset
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.InputShape">
            <summary>
            Input data dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.OutputShape">
            <summary>
            Output data dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.LossFunction">
            <summary>
            Loss function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Training">
            <summary>
            Training dataset
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Validation">
            <summary>
            Validation dataset
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Testing">
            <summary>
            Test dataset
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep">
            <summary>
            Data step
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.Input">
            <summary>
            Input data tensor
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.TargetOutput">
            <summary>
            Тензор идеального значения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Data step
            </summary>
            <param name="input">Input data tensor</param>
            <param name="targetOutput">Тензор выхода</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(System.Double[],System.Double[])">
            <summary>
            Data step
            </summary>
            <param name="input">Input</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Data step
            </summary>
            <param name="input">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(System.Double[])">
            <summary>
            Data step
            </summary>
            <param name="input">Input data vector</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.GraphCPU">
            <summary>
            Graph of automatic differentiation for CPU
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.IsBackward">
            <summary>
            Whether to calculate derivatives
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Backprop">
            <summary>
            Functions for which derivatives are calculated
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.#ctor">
            <summary>
            Graph of automatic differentiation for CPU
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.#ctor(System.Boolean)">
            <summary>
            Graph of automatic differentiation for CPU
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Backward">
            <summary>
            Backward pass (differentiation)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Restart(System.Boolean)">
            <summary>
            Restart
            </summary>
            <param name="isBacward">  Is there a backward pass</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Copyist(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Copy tensor
            </summary>
            <param name="value">Tensor</param>
            <param name="count">Number of copies</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ScalarProduct(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Dot product of two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.AddCicleBuff(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Adding an item
            </summary>
            <param name="old">Buffer old state</param>
            <param name="inp">Added element</param>
            <param name="len">Buffer capacity</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Vector concatenation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.DeConcatinateOne(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Cutting a vector into vectors by 1 element
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Concatenate two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Activate(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Activation function
            </summary>
            <param name="function">Function activation</param>
            <param name="t">The tensor to which it is applied</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Mul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MulMV(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Matrix-vector multiplication
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Addition of two tensors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Addition of three tensors
            </summary>
            <param name="t1">Tensor #1</param>
            <param name="t2">Tensor #2</param>
            <param name="t3">Tensor #3</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.OneMinus(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            1-m
            </summary>
            <param name="m">Input data tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Subtract(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MulMatrixByNumber(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Single)">
            <summary>
            Multiplication by a number
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MulMatrixByNumber(System.Single,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Multiplication by a number
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Invers(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Tensor inversion -m
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.AdamarMul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Adamar product of tensors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convolution without bias
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convolution
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MaxPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Max pooling 2D
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Tensor shape transformation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.UnPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            UnPooling 2D
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Upsampling2DBicubic(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.AddN(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Adding a tensor to a number
            </summary>
            <param name="tensor">Tensor</param>
            <param name="number">Number</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.DropOut(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Single,System.Single,System.Random)">
            <summary>
            Dropout
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.DeepSplit(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Splitting a tensor into multiple tensors by depth
            </summary>
            <param name="data">Input tensor</param>
            <param name="countLayersInSlice">Number of layers in one slice</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ImRealCross(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Mixing real and imaginary parts to create a new real and imaginary part
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.DeepJoin(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Tensor depth join
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.FeedForwardLayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Feedforward layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.GRULayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit,AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit,AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit)">
            <summary>
            Gru layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.FeedforwardLinLayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Feedforward linear layer
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.INetwork">
            <summary>
            Interface of neural network
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.INetwork.InputShape">
            <summary>
            Inputs shape
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.INetwork.OutputShape">
            <summary>
            Outputs shape
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.INetwork.TrainableParameters">
            <summary>
            Number of trainable parameters
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.INetwork.Layers">
            <summary>
            List of layers
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input data</param>
            <param name="g">Graph of automatic differentiation</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.ResetState">
            <summary>
            Reset state, must be in a recurrent neural network
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.GetParameters">
            <summary>
            Trainable parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.Save(System.String)">
            <summary>
            Save network
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer)">
            <summary>
            Append a new layer to the network
            </summary>
            <param name="layer">New layer</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.INetwork.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer)">
            <summary>
            Append a new layer to the network
            </summary>
            <param name="inputShape">Input shape</param>
            <param name="layer">new layer</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.NNW">
            <summary>
            Neural network
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNW.Layers">
            <summary>
            List of network layers
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNW.InputShape">
            <summary>
            Input dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNW.OutputShape">
            <summary>
            Output dimension
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNW.TrainableParameters">
            <summary>
            Number of learning parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.#ctor(System.Int32)">
            <summary>
            Neural network
            </summary>
            <param name="seed">Random number generator seed</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.#ctor(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer})">
            <summary>
            Neural network
            </summary>
            <param name="layers">List of layers</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer)">
            <summary>
            Adding a NEW layer to the neural network
            </summary>
            <param name="layer">Layer</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Layers.Base.ILayer)">
            <summary>
            Adding a NEW layer to the neural network
            </summary>
            <param name="inpShape">Input tensor shape</param>
            <param name="layer">Layer</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Forward pass
            </summary>
            <param name="input">Input</param>
            <param name="g">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.ResetState">
            <summary>
            Resetting the state (necessary for recurrent neural networks)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.GetParameters">
            <summary>
            Getting trained parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.ToString">
            <summary>
            Layer description
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.Save(System.String)">
            <summary>
            Saving the neural network
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.Load(System.String)">
            <summary>
            Loading a neural network
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNW.OnlyUse">
            <summary>
            Use only mode, all additional parameters are deleted
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax">
            <summary>
            Calculation of the error for the cross entropy provided that the output is Softmax
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss">
            <summary>
            Loss function interface
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.Loss4Pow">
            <summary>
            Ошибка 4я степень, для контрастирования выбросов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.Loss4Pow.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.Loss4Pow.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossArgMax">
            <summary>
            Аргмакс (нереализован)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossArgMax.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossArgMax.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropy">
            <summary>
            Перекрестная энтропия
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropy.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropy.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actual">Output value (actual)</param>
            <param name="target">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt">
            <summary>
            Средний квадрат отклонения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMSE">
            <summary>
            Mean square of error
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMSE.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMSE.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares">
            <summary>
            Сумма квадратов отклонения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Backward pass (taking derivative)
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Error value
            </summary>
            <param name="actualOutput">Output value (actual)</param>
            <param name="targetOutput">Target value (ideal)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph">
            <summary>
            Self-differentiation graph interface
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.IsBackward">
            <summary>
            Is there a backward pass
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Backprop">
            <summary>
            Back pass elements
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Backward">
            <summary>
            Backward pass (differentiation)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Restart(System.Boolean)">
            <summary>
            Restart
            </summary>
            <param name="isBacward">  Is there a backward pass</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Copyist(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Copy tensor
            </summary>
            <param name="value">Tensor</param>
            <param name="count">Number of copies</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ScalarProduct(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Dot product of two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Concatenate two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Vector concatenation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.DeConcatinateOne(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Cutting a vector into vectors by 1 element
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Activate(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Activation function
            </summary>
            <param name="function">Function activation</param>
            <param name="t">The tensor to which it is applied</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.AddCicleBuff(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Adding an item
            </summary>
            <param name="old">Buffer old state</param>
            <param name="inp">Added element</param>
            <param name="len">Buffer capacity</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Mul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MulMV(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Matrix-vector multiplication
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Addition of two tensors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.AddN(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Adding a tensor to a number
            </summary>
            <param name="tensor">Tensor</param>
            <param name="number">Number</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Addition of three tensors
            </summary>
            <param name="t1">Tensor #1</param>
            <param name="t2">Tensor #2</param>
            <param name="t3">Tensor #3</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.OneMinus(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            1-m
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Subtract(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MulMatrixByNumber(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Single)">
            <summary>
            Multiplication by a number
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MulMatrixByNumber(System.Single,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Multiplication by a number
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Invers(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Tensor inversion -m
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.AdamarMul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Adamar product of tensors
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convolution without bias
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convolution
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MaxPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Max pooling 2D
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Tensor shape transformation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.UnPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            UnPooling 2D
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Upsampling2DBicubic(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Upsampling with bicubic interpolation
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.DropOut(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Single,System.Single,System.Random)">
            <summary>
            Dropout
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ImRealCross(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Mixing real and imaginary parts to create a new real and imaginary part
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.DeepJoin(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Tensor depth join
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.DeepSplit(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Splitting a tensor by depth
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.FeedForwardLayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Feedforward layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.FeedforwardLinLayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Feedforward linear layer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.GRULayer(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit,AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit,AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit)">
            <summary>
            GRU layer
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.IBackwardRun">
            <summary>
            Interface for starting the calculation of derivatives by a chain rule
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IBackwardRun.StartCalc">
            <summary>
            Starting the calculation of derivatives
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.Runnable">
            <summary>
            Class for starting the calculation of derivatives by a chain rule
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.Runnable.StartCalc">
            <summary>
            Class for starting the calculation of derivatives by a chain rule
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.NNValue">
            <summary>
            The main class for storing data about a neural network, can be a vector, matrix or tensor of the 3rd rank
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.DifData">
            <summary>
            Gradients
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.StepCache">
            <summary>
            Cache for the first time the optimizer
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.StepCache2">
            <summary>
            Cache optimizers for more complex, with two moments, such Adam
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.H">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.W">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.D">
            <summary>
            Depth
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Count">
            <summary>
            The number of elements in a tensor
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.S">
            <summary>
            Area, product of width and height
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Volume">
            <summary>
            Volume, product of tensor width, height and depth
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32)">
            <summary>
            Getting an element by its index in an array
            </summary>
            <param name="i">index</param>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32,System.Int32)">
            <summary>
            Retrieving an element by index of height and width
            </summary>
            <param name="h">Height index</param>
            <param name="w">Width index</param>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieving an element by index of height, width and depth
            </summary>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="d">Deep</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32)">
            <summary>
            Создание тензора с параметрами dim, 1,1
            </summary>
            <param name="dim">Размерность тензора</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Create tensor
            </summary>
            <param name="shape">Shape of the tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Division(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Double)">
            <summary>
            Division of the tensor of DERIVATIVES by a number
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Implicit(AI.DataStructs.Algebraic.Vector)~AI.ML.NeuralNetwork.CoreNNW.NNValue">
            <summary>
            Implicit cast Vector -> NNValue
            </summary>
            <param name="vector">Input vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Implicit(AI.DataStructs.Algebraic.Matrix)~AI.ML.NeuralNetwork.CoreNNW.NNValue">
            <summary>
            Implicit cast Matrix -> NNValue
            </summary>
            <param name="matrix">Input matrix</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Implicit(AI.DataStructs.Algebraic.Tensor)~AI.ML.NeuralNetwork.CoreNNW.NNValue">
            <summary>
            Implicit cast Tensor -> NNValue
            </summary>
            <param name="tensor">Input tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Explicit(AI.ML.NeuralNetwork.CoreNNW.NNValue)~AI.DataStructs.Algebraic.Vector">
            <summary>
            Explicit cast NNValue -> Vector
            </summary>
            <param name="value">Input value</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Explicit(AI.ML.NeuralNetwork.CoreNNW.NNValue)~AI.DataStructs.Algebraic.Matrix">
            <summary>
            Explicit cast NNValue -> Matrix
            </summary>
            <param name="value">Input value</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.op_Explicit(AI.ML.NeuralNetwork.CoreNNW.NNValue)~AI.DataStructs.Algebraic.Tensor">
            <summary>
            Explicit cast NNValue -> Tensor
            </summary>
            <param name="value">Input value</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Like0">
            <summary>
            Similar tensor (same shape, filled with zeros)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Double)">
            <summary>
            Create tensor with parameters 1, 1,1
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Create a tensor based on a vector, the vector becomes a column vector
            </summary>
            <param name="data">Input vector</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Create a tensor based tensor from AI
            </summary>
            <param name="tensor">Tensor</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Creating a tensor based on a matrix of AI
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Creating a matrix (tensor H x W x 1 x 1)
            </summary>
            <param name="h">Height</param>
            <param name="w">Width</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create tensor
            </summary>
            <param name="h">Height</param>
            <param name="w">Width</param>
            <param name="d">Deep</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Double[])">
            <summary>
            Vector creation
            </summary>
            <param name="vector">Array of type double</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.CalcS">
            <summary>
            Calculate squre
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToString">
            <summary>
            Перевод матрицы в строку
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToStrings">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTensor">
            <summary>
            Перевод в AI Тензор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToMatrix">
            <summary>
            Перевод в AI Матрицу
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToVector">
            <summary>
            Перевод в AI Вектор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTxts">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTxtsNoInfo">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Gauss(System.Random)">
            <summary>
            Гауссово распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Clone">
            <summary>
            Клонирование тензора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ResetDw">
            <summary>
            Сброс производных
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ResetStepCache">
            <summary>
            Сброс кэша
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Transpose(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Транспонирование
            </summary>
            <param name="m">Матрица</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Random(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w"> Height </param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Random(System.Int32,System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w"> Height </param>
            <param name="d">Глубина</param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.RandomR(System.Int32,System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w"> Height </param>
            <param name="d">Глубина</param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ident(System.Int32)">
            <summary>
            Создание единичной матрицы
            </summary>
            <param name="dim">Размерность матрицы</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Uniform(System.Int32,System.Int32,System.Double)">
            <summary>
            Создание матрицы заполненной одним числом
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
            <param name="s">Число</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ones(System.Int32,System.Int32)">
            <summary>
            Заполнение тензора единицами
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ones(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Заполнение тензора единицами
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ones(System.Int32)">
            <summary>
            Заполнение тензора единицами
            </summary>
            <param name="h"> Height </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.NegativeOnes(System.Int32,System.Int32)">
            <summary>
            Заполнение тензора -1
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.SaveAsText(System.String)">
            <summary>
            Сохранение тензора в текстовом формате
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.SaveAsTextNoInfo(System.String)">
            <summary>
            Сохранение без тензора без описания
            </summary>
            <param name="path">Путь для сохранения</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.GetShape">
            <summary>
            Получить форму тензора
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Saver">
            <summary>
            Класс для сохранения нейросети и компонентов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.LoadNetwork(System.String)">
            <summary>
            Deserialization of a neural network
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.SaveNetwork(System.String,AI.ML.NeuralNetwork.CoreNNW.INetwork)">
            <summary>
            Saving a neural network to binary
            </summary>
            <param name="filePath">File path</param>
            <param name="nnw">Neural network</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Shape">
            <summary>
            Форма тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.H">
            <summary>
            Высота тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.W">
            <summary>
            Ширина тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.D">
            <summary>
            Глубина тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.Volume">
            <summary>
            Число элементов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor">
            <summary>
            Форма тензора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32)">
            <summary>
            Форма тензора(создает форму высоты h, ширина 1, глубина 1)
            </summary>
            <param name="h"> Height </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32,System.Int32)">
            <summary>
            Форма тензора(создает форму высоты h, ширина w, глубина 1)
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина тензора</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Форма тензора
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина тензора</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.op_Equality(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Equals operator
            </summary>
            <param name="shape1"></param>
            <param name="shape2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.op_Inequality(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Opposite to equals operator
            </summary>
            <param name="shape1"></param>
            <param name="shape2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Изменение 
            </summary>
            <param name="value"></param>
            <param name="newShape"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.ToString">
            <summary>
            Суммаризация 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.ITrainer">
            <summary>
            Интерфейс учителя
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.ITrainer.Train(System.Int32,System.Int32,System.Single,AI.ML.NeuralNetwork.CoreNNW.INetwork,AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet,System.Single)">
            <summary>
            Network training
            </summary>
            <param name="epochesToPass">Number of epochs</param>
            /// <param name="batchSize">Batch size</param>
            <param name="learningRate">Learning rate</param>
            <param name="network">Neural network</param>
            <param name="data">Data set</param>
            <param name="minLoss">Minimal loss value</param>
            <returns>Loss</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.ITrainer.TrainAsync(System.Int32,System.Int32,System.Single,AI.ML.NeuralNetwork.CoreNNW.INetwork,AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet,System.Single,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Network async training
            </summary>
            <param name="epochesToPass">Number of epochs</param>
            <param name="batchSize">Batch size</param>
            <param name="learningRate">Learning rate</param>
            <param name="network">Neural network</param>
            <param name="data">Data set</param>
            <param name="minLoss">Minimal loss value</param>
            <returns>Loss</returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer">
            <summary>
            Class for training neural networks
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.L1Regularization">
            <summary>
            Regularization coefficient L1, if it is equal to 0 L1 no regularization
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.L2Regularization">
            <summary>
            Regularization coefficient L2, if it is equal to 0 L2 regularization no
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.Optimizer">
            <summary>
            Learning method SGD, Adam, etc.
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.GradientClipValue">
            <summary>
            Gradient clipping to avoid gradient explosion, default 3
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.Info">
            <summary>
            Neural network training information
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.IsBusy">
            <summary>
            True if currently training another model
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.DoOverfitStop">
            <summary>
            Whether to stop learning when overfitting
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.DoCheckPointSave">
            <summary>
            Whether to make intermediate saves
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.CheckPointSaver">
            <summary>
            Checkpoint saver
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.MetricsMin">
            <summary>
            The minimum value for metrics that decrease as the quality of the model increases
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.MetricsMax">
            <summary>
            The maximum value for metrics that increase with increasing model quality
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.Metrics">
            <summary>
            Metric
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.ReportType">
            <summary>
            Report type
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.ControlFunction">
            <summary>
            Function that controls the training of the neural network.If it evaluates to "true", training will be stopped.
            The function of the following form "bool Function (INetwork network, TrainInfo info, float bestVal)"
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.#ctor">
            <summary>
            Creating a trainer for a neural network
            </summary> 
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Creating a trainer for a neural network
            </summary> 
            <param name="graph">Graph of automatic differentiation</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph,AI.ML.NeuralNetwork.CoreNNW.Optimizers.IOptimizer)">
            <summary>
            Creating a trainer for a neural network
            </summary> 
            <param name="graph">Graph of automatic differentiation</param>
            <param name="trainType">Train type</param>
            <param name="optimizer">Optimizer training method</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph,AI.ML.NeuralNetwork.CoreNNW.Optimizers.IOptimizer,System.Int32)">
            <summary>
            Creating a trainer for a neural network
            </summary> 
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.Train(System.Int32,System.Int32,System.Single,AI.ML.NeuralNetwork.CoreNNW.INetwork,AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet,System.Single)">
            <summary>
            Network training
            </summary>
            <param name="epochesToPass">Number of epochs</param>
            <param name="learningRate">Learning rate</param>
            <param name="network">Neural network</param>
            <param name="data">Data set</param>
            <param name="minLoss">Minimal loss value</param>
            <returns>Loss</returns>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.ReportElementCreated">
            <summary>
            Calls when new report element is created
            </summary>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.EpochPassed">
            <summary>
            Calls when epoch is passed
            </summary>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.TrainingStarted">
            <summary>
            Calls when training is started
            </summary>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.TrainingFinished">
            <summary>
            Calls when training is finished
            </summary>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.TrainingStopped">
            <summary>
            Calls when network training is stopped without finishing all epoches
            </summary>
        </member>
        <member name="E:AI.ML.NeuralNetwork.CoreNNW.Train.Trainer.TrainingCancelled">
            <summary>
            Calls when network training is cancelled by the token
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo">
            <summary>
            Information about training a neural network
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.ValidationLoss">
            <summary>
            Validation error
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.TrainLoss">
            <summary>
            Train error
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.TestLoss">
            <summary>
            Test error
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.#ctor">
            <summary>
            Information about training a neural network
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adadelta">
            <summary>
            Adadelta
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adadelta.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adadelta.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name=" gradG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L2 </param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adagrad">
            <summary>
            Adagrad
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adagrad.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adagrad.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name="kG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L2 </param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam">
            <summary>
            Adam
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.#ctor(System.Single,System.Single)">
            <summary>
            Adam
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name="kG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L1 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adamax">
            <summary>
            Adamax
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adamax.#ctor">
            <summary>
            Adamax
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adamax.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name="kG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L1 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adamax.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.IOptimizer">
            <summary>
            Optimizer
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.IOptimizer.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating parameters 
            </summary>
            <param name="network"> Neural network</param>
            <param name="learningRate"> Learning rate</param>
            <param name="gradClip"> Maximum gradient value</param>
            <param name="gradGain">Gradient enhancement factor</param>
            <param name="L1">L1 regularization</param>
            <param name="L2">L2 regularization</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.IOptimizer.Reset">
            <summary>
            Resetting Teaching Parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Nesterov">
            <summary>
            Nesterov
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Nesterov.#ctor">
            <summary>
            Nesterov
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Nesterov.#ctor(System.Single)">
            <summary>
            Nesterov
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Nesterov.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name="kG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L1 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Nesterov.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.RMSProp">
            <summary>
             RMSProp
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Optimizers.RMSProp.DecayRate">
            <summary>
            Momentum
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Optimizers.RMSProp.SmoothEpsilon">
            <summary>
            Smoothing factor
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.RMSProp.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating model parameters 
            </summary>
            <param name="network"> Neural network </param>
            <param name="learningRate">Learning rate</param>
            <param name="gradClip"> Maximum gradient value </param>
            <param name="kG"> Gain of gradients </param>
            <param name="L1"> Regularization coefficient L1 </param>
            <param name="L2"> Regularization coefficient L1 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.RMSProp.Reset">
            <summary>
            Resetting neural network training parameters
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD">
            <summary>
            Stochastic gradient descent
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.Momentum">
            <summary>
            Momentum
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.#ctor">
            <summary>
            Stochastic gradient descent, moment = 0
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.#ctor(System.Single)">
            <summary>
            Stochastic gradient descent
            </summary>
            <param name="momentum">Moment</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.Reset">
            <summary>
            Resetting Teaching Parameters
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.INetwork,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Updating parameters 
            </summary>
            <param name="network"> Neural network</param>
            <param name="learningRate"> Learning rate</param>
            <param name="gradClip"> Maximum gradient value</param>
            <param name="gradGain">Gradient enhancement factor</param>
            <param name="L1">L1 regularization</param>
            <param name="L2">L2 regularization</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.ToString">
            <summary>
            String representation
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Utilities.Metrics.RMSLE">
            <summary>
            RMLE (target[i]>-1, output[i]>-1 for all i \in [0; N-1])
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Utilities.OverfitDetector.IsOverfit(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Overfit test
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.NeuralNetworkManager">
            <summary>
            Neural network manager (helper)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.Model">
            <summary>
            Neural Network
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.Graph">
            <summary>
            Graph of automatic differentiation
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.Optimizer">
            <summary>
            Optimizer
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.Loss">
            <summary>
            Loss function
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.LearningRate">
            <summary>
            Learning rate
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.L1Regularization">
            <summary>
            L1 регуляризация
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.L2Regularization">
            <summary>
            L2 регуляризация
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.GradientClipValue">
            <summary>
            Ограничение градиентов
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.ValSplit">
            <summary>
            Какая часть выборки идет на валидацию модели
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.BatchSize">
            <summary>
            Размер батча
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.EpochesToPass">
            <summary>
            Number of epochs
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.NeuralNetworkManager.MinLoss">
            <summary>
            Минимальная ошибка после которой останавливается обучение
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.#ctor">
            <summary>
            Neural network
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.#ctor(System.String)">
            <summary>
            Neural network
            </summary>
            <param name="path">Path to the saved network</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNW)">
            <summary>
            Neural network
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.Forward(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardMatrix(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardTensor(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.Forward(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardMatrix(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardTensor(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.Forward(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardMatrix(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardTensor(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Neural network direct pass
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrent(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Forward pass рекуррентной сети с одним входом и вектором выходов
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrent(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Forward pass рекуррентной сети с вектором входом и вектором выходов
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentMatrix(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentTensor(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrent(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentMatrix(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentTensor(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrent(AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Forward pass рекуррентной сети с вектором входом и вектором выходов
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentMatrix(AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.ForwardRecurrentTensor(AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Forward pass рекуррентной сети
            </summary>
            <param name="input">Input</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Vector[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Vector[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Matrix[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Matrix[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Matrix[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Tensor[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Matrix[],AI.DataStructs.Algebraic.Tensor[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Tensor[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(AI.DataStructs.Algebraic.Tensor[],AI.DataStructs.Algebraic.Tensor[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetSignal(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetSignalAsync(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Vector}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Matrix}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNet(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[])">
            <summary>
            Neural network training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.NeuralNetworkManager.TrainNetAsync(System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Collections.Generic.List{AI.DataStructs.Algebraic.Tensor}[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Neural network async training
            </summary>
            <param name="inputs">Inputs</param>
            <param name="outputs">Outputs(target values)</param>
        </member>
        <member name="T:AI.ML.Regression.IRegression">
            <summary>
            Regression interface
            </summary>
        </member>
        <member name="M:AI.ML.Regression.IRegression.Train(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Regression training
            </summary>
            <param name="data">Set of vector inputs</param>
            <param name="targets">Output vector</param>
        </member>
        <member name="M:AI.ML.Regression.IRegression.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Model prediction
            </summary>
            <param name="data">Input data vector</param>
        </member>
        <member name="T:AI.ML.Regression.KNNCorR">
            <summary>
            Regression(k-nearest neighbors method) (correlation metric)
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNCorR.K">
            <summary>
            Number of neighbors
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNCorR.FixedH">
            <summary>
            Is the width fixed
            </summary>
        </member>
        <member name="F:AI.ML.Regression.KNNCorR.isMutation">
            <summary>
            Whether to trigger mutation of neighbors
            </summary>
        </member>
        <member name="F:AI.ML.Regression.KNNCorR.mutCount">
            <summary>
            Number of mutated neighbors
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNCorR.Dist">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNCorR.Reg">
            <summary>
            Regression data
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.#ctor">
            <summary>
            Regression (Nearest Neighbor Method)
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.#ctor(System.String)">
            <summary>
            Regression (Nearest Neighbor Method)
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.#ctor(AI.ML.Regression.StructRegres)">
            <summary>
            Regression (Nearest Neighbor Method)
            </summary>
            <param name="reg"> Данные для регрессии</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Save(System.String)">
            <summary>
            Saving the regression model
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Open(System.String)">
            <summary>
            Loading a regression model
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Train(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Adding data
            </summary>
            <param name="tData">Central vector</param>
            <param name="targ">Dependent (target) variable</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.AddData(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Добавление данных для обучения
            </summary>
            <param name="tData">Input data vector</param>
            <param name="targ">Выход</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Train(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Regression training
            </summary>
            <param name="tData">Training data inputs</param>
            <param name="targs">Ideal outputs</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Train(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Regression training
            </summary>
            <param name="tData">Training data inputs</param>
            <param name="targs">Ideal outputs</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Model prediction
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.ImpObj">
            <summary>
            Calculation of the distribution of the importance of objects for the forecast
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.OnlyImp(System.Int32)">
            <summary>
            Leaves only objects important for forecasting
            </summary>
            <param name="n">Number of objects to keep</param>
        </member>
        <member name="M:AI.ML.Regression.KNNCorR.PredictV(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Vector prediction
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="T:AI.ML.Regression.KnnMultyRegr">
            <summary>
            Regression (k-nearest neighbors method)
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.K">
            <summary>
            Number of neighbors
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.H">
            <summary>
            Window width
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.FixedH">
            <summary>
            Is the width fixed
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.IsNadrMethod">
            <summary>
            Используется ли окно Парзена
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.KernelWindow">
            <summary>
            Ядро окна
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.Dist">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KnnMultyRegr.Reg">
            <summary>
            Dataset
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.#ctor">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.RbfK(System.Double)">
            <summary>
            Радиально-базисное ядро для окна Парзена
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.#ctor(System.String)">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.#ctor(AI.ML.Regression.StructRegresMulty)">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
            <param name="reg"> Данные для регрессии</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Save(System.String)">
            <summary>
            Save
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Open(System.String)">
            <summary>
            Loading
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.ToData(System.Int32,System.Double@)">
            <summary>
            Перевод в double
            </summary>
            <param name="i">Index</param>
            <param name="R">Window weight (return parameter)</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Train(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="targ">Зависимая переменная</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Train(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Regression training
            </summary>
            <param name="tData">Input data</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Train(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Regression training
            </summary>
            <param name="tData">Input data</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Forecasted vector
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="M:AI.ML.Regression.KnnMultyRegr.PredictV(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Predict
            </summary>
            <param name="inp">Input vector</param>
        </member>
        <member name="T:AI.ML.Regression.KNNReg">
            <summary>
            Regression (k-nearest neighbors method)
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.K">
            <summary>
            Number of neighbors
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.H">
            <summary>
            Window width
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.FixedH">
            <summary>
            Is the width fixed
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.IsNadrMethod">
            <summary>
            Используется ли окно Парзена
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.KernelWindow">
            <summary>
            Ядро окна
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.Dist">
            <summary>
            Distance function
            </summary>
        </member>
        <member name="P:AI.ML.Regression.KNNReg.Reg">
            <summary>
            Данные для регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.#ctor">
            <summary>
            Regression (k-nearest neighbors method)
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.RbfK(System.Double)">
            <summary>
            Radial-basis kernel for the Nadaraya-Watson method
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.#ctor(System.String)">
            <summary>
            Regression (k-nearest neighbors method)
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.#ctor(AI.ML.Regression.StructRegres)">
            <summary>
            Regression (k-nearest neighbors method)
            </summary>
            <param name="reg">Dataset</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Save(System.String)">
            <summary>
            Save
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Open(System.String)">
            <summary>
            Loading
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.ToData(System.Int32,System.Double@)">
            <summary>
            Перевод в double
            </summary>
            <param name="i">Index</param>
            <param name="R">Вес окна</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Rang(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Ранжирование
            </summary>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Train(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="targ">Зависимая переменная</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Train(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Regression training
            </summary>
            <param name="tData">Input data</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Train(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Regression training
            </summary>
            <param name="tData">Input data</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Возращает вектор, его длинна - Number of classes, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Input data vector</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Regression.KNNReg.PredictV(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прогноз вектора значений
            </summary>
            <param name="inp">Input data vector</param>
        </member>
        <member name="T:AI.ML.Regression.LinearRegressionModel">
            <summary>
            Модель для линейной регрессии хранит k и b   
            f(x) = k*x+b;
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.k">
            <summary>
            Тангенс угла наклона
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.b">
            <summary>
            Смещение относительно (0;0)
            </summary>
        </member>
        <member name="T:AI.ML.Regression.LinearRegression">
            <summary>
            Линейная регрессия
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegression.Lrm">
            <summary>
            Парамметры линейной регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обучающая выборка
            </summary>
            <param name="X">Вектор X(независимая переменная)</param>
            <param name="Y">Вектор Y(зависимая переменная)</param>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns>Строка типа: f(x) = k*x+(b)</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(System.Double)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="x">Независимая переменная</param>
            <returns>Зависимая переменная</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="X">Вектор независимых переменных</param>
            <returns>Вектор зависимых переменных</returns>
        </member>
        <member name="T:AI.ML.Regression.MultipleRegression">
            <summary>
            Multiple regression
            </summary>
        </member>
        <member name="P:AI.ML.Regression.MultipleRegression.Parammetrs">
            <summary>
            Параметры модели
            </summary>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(System.Boolean)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="isScale">Стоит ли применить масштабирование к данным</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(System.String)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="path">Путь до модели</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Input data vector</param>
            <returns>Выход</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Вектора входа</param>
            <returns>Output vector</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.SaveModel(System.String)">
            <summary>
            Сохранение модели
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.LoadModel(System.String)">
            <summary>
            Loading the model
            </summary>
            <param name="path">The path to the file</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Train(AI.DataStructs.Algebraic.Vector[],AI.DataStructs.Algebraic.Vector)">
            <summary>
            Multiple regression training
            </summary>
            <param name="data">Features</param>
            <param name="targets">Ideal outputs</param>
        </member>
        <member name="T:AI.ML.Regression.PolynomialRegression">
            <summary>
            Description of PolynomialRegression.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.#ctor(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Полиномиальная регрессия
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Значение незав. переменной</param>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Значения незав. переменных</param>
        </member>
        <member name="T:AI.ML.Regression.StructRegr">
            <summary>
            Regression dataset item
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.Target">
            <summary>
            Target variable value
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.Features">
            <summary>
            Feature vector
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.R">
            <summary>
            Distance
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.Params">
            <summary>
            Extra options
            </summary>
        </member>
        <member name="T:AI.ML.Regression.StructRegres">
            <summary>
            Regression dataset
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegres.Classes">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:AI.ML.Regression.StructRegresMulty">
            <summary>
            Dataset for regression
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegresMulty.Classes">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:AI.ML.Regression.StructRegrMulty">
            <summary>
            Structure for storing regression data
            </summary>
        </member>
        <member name="F:AI.ML.Regression.StructRegrMulty._targ">
            <summary>
            Target vector
            </summary>
        </member>
        <member name="F:AI.ML.Regression.StructRegrMulty._centGiperSfer">
            <summary>
            Center of the hypersphere
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegrMulty.Targets">
            <summary>
            Target vector
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegrMulty.CentGiperSfer">
            <summary>
            Center of the hypersphere
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegrMulty.R">
            <summary>
            Distance
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegrMulty.Params">
            <summary>
            Extra options
            </summary>
        </member>
        <member name="T:AI.ML.SeqPredict.AR">
            <summary>
            Autoregression
            </summary>
        </member>
        <member name="T:AI.ML.SeqPredict.GRUPredict">
            <summary>
            Prediction with GRU network
            </summary>
        </member>
        <member name="M:AI.ML.SeqPredict.GRUPredict.#ctor(System.Int32)">
            <summary>
            Prediction with GRU network
            </summary>
        </member>
        <member name="M:AI.ML.SeqPredict.GRUPredict.Predict(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Prediction n next values
            </summary>
            <param name="data">Start data</param>
            <param name="n">Number of next sempls</param>
        </member>
        <member name="T:AI.ML.SeqPredict.ISeqPredict">
            <summary>
            Прогнозирование последовательностей
            </summary>
        </member>
        <member name="M:AI.ML.SeqPredict.ISeqPredict.Train(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обучение
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.ML.SeqPredict.ISeqPredict.Predict(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Прогноз
            </summary>
        </member>
        <member name="M:AI.ML.SeqPredict.ISeqPredict.PredictTrain(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обучение и прогноз на 1
            </summary>
        </member>
        <member name="T:AI.ML.SeqPredict.SeqPrediction">
            <summary>
            Прогнозирование последовательности
            </summary>
        </member>
        <member name="M:AI.ML.SeqPredict.SeqPrediction.#ctor(AI.ML.Regression.IRegression,System.Int32)">
            <summary>
            Прогнозирование последовательности
            </summary>
            <param name="reg">Алгоритм прогнозирования</param>
            <param name="w">Window width</param>
        </member>
        <member name="M:AI.ML.SeqPredict.SeqPrediction.Train(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Обучение модели
            </summary>
            <param name="data">Последовательность</param>
        </member>
        <member name="M:AI.ML.SeqPredict.SeqPrediction.Predict(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Прогноз
            </summary>
            <param name="data">Известная часть последовательности</param>
            <param name="n">Сколько шагов предсказать</param>
        </member>
        <member name="T:AI.Shuffling`1">
            <summary>
            Shuffling an array using the Knuth method
            </summary>
            <typeparam name="T">Data type in the array</typeparam>
        </member>
        <member name="M:AI.Shuffling`1.Shuffle(`0[],System.Int32)">
            <summary>
            Shuffling an array using the Knuth method
            </summary>
            <param name="data">Array</param>
            <param name="seed">Random number generator seed</param>
        </member>
        <member name="T:AI.Sound">
            <summary>
            Description of Sound.
            </summary>
        </member>
        <member name="F:AI.Sound.chunkID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:AI.Sound.fileSize">
            <summary>
            Размер файла
            </summary>
        </member>
        <member name="F:AI.Sound.riffType">
            <summary>
            Тип
            </summary>
        </member>
        <member name="F:AI.Sound.fmtID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.fmtSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.fmtCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.channels">
            <summary>
            Каналы (число)
            </summary>
        </member>
        <member name="F:AI.Sound.sampleRate">
            <summary>
            Sampling frequency
            </summary>
        </member>
        <member name="F:AI.Sound.fmtAvgBPS">
            <summary>
            средний битрейт
            </summary>
        </member>
        <member name="F:AI.Sound.fmtBlockAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.bitDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.dataID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.dataSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.Sound.#ctor">
            <summary>
            Звук
            </summary>
        </member>
        <member name="M:AI.Sound.SoundLoad(System.String)">
            <summary>
            Загрузка звука
            </summary>
            <param name="path">File path</param>
            <returns></returns>
        </member>
        <member name="M:AI.Sound.SaveVector(System.String,AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Save vector как звука
            </summary>
            <param name="path"></param>
            <param name="vector"></param>
            <param name="fd"></param>
        </member>
        <member name="T:AI.SpecialFunction.EllipticIntegral">
            <summary>
            Эллиптические интегралы
            </summary>
        </member>
        <member name="M:AI.SpecialFunction.EllipticIntegral.CompleteEllipticIntegral_I(System.Double)">
            <summary>
            Полный эллиптический интеграл первого рода
            </summary>
            <param name="k">Значение</param>
        </member>
        <member name="M:AI.SpecialFunction.EllipticIntegral.CompleteComplementarEllipticIntegral_I(System.Double)">
            <summary>
            Полный комплементарный эллиптический интеграл первого рода
            </summary>
            <param name="k">Значение</param>
        </member>
        <member name="T:AI.SystemSaver`1">
            <summary>
            Serialization with a system class for binary serialization
            </summary>
            <typeparam name="T">Datatype</typeparam>
        </member>
        <member name="M:AI.SystemSaver`1.Load(System.String)">
            <summary>
            Loading from file
            </summary>
        </member>
        <member name="M:AI.SystemSaver`1.Save(System.String,`0)">
            <summary>
            Saving to a binary file
            </summary>
        </member>
        <member name="T:AI.AlgebraicStructureFunctions">
            <summary>
            Transformation of algebraic structures
            </summary>
            <typeparam name="T">Structure type</typeparam>
        </member>
        <member name="M:AI.AlgebraicStructureFunctions.Transform(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure,System.Func{System.Double,System.Double})">
            <summary>
            Transformation of algebraic structures
            </summary>
            <param name="inp">Input multidimensional structure</param>
            <param name="outp">Output multidimensional structure</param>
            <param name="fTransform">Transformation function</param>
        </member>
        <member name="T:AI.Extensions.ExtensionMath">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.String[],System.Func{System.String,System.String})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.String[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.MatrixsToTensor(AI.DataStructs.Algebraic.Matrix[])">
            <summary>
            Методы расширения из AI.dll 
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToVector(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Double[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Single[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Double[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int32[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int64[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Int16[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Single[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToMatrix(System.Byte[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Single[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Int32[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Int64[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Decimal[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Int16[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToDoubArray2D(System.Byte[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToFloatArray(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Mean(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Disp(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Std(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Single[],System.Func{System.Single,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Int32[],System.Func{System.Int32,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Int64[],System.Func{System.Int64,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Decimal[],System.Func{System.Decimal,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Byte[],System.Func{System.Byte,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Int16[],System.Func{System.Int16,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.Transform(System.Int16[],System.Func{System.Int16,System.Int16})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Double[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Single[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Int32[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Int16[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Byte[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Int64[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.ToStr(System.Decimal[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.Extensions.ExtensionMath.GetDimention(AI.DataStructs.Algebraic.Vector[],System.Int32)">
            <summary>
            Getting the vector of the desired coordinate from the array of vectors
            </summary>
            <param name="array"></param>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="T:AI.Functions">
            <summary>
            Математические фукции
            </summary>
        </member>
        <member name="M:AI.Functions.WindowFunc(AI.DataStructs.Algebraic.Vector,System.Func{AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.DataStructs.Algebraic.Vector,System.Func{AI.DataStructs.Algebraic.Vector,System.Double},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.DataStructs.Algebraic.Vector,System.Func{AI.DataStructs.Algebraic.Vector,System.Double},System.Int32,System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <param name="stride">step</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.NextPow2(System.Int32)">
            <summary>
            Следующая степень числа 2
            </summary>
            <param name="n">входное число</param>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Summ(System.Double[])">
            <summary>
            Суммирование всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(System.Single[])">
            <summary>
            Суммирование всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Поэлементная сумма
            </summary>
            <param name="vectors">Массив векторов</param>
            <returns>Результирующий вектор</returns>
        </member>
        <member name="M:AI.Functions.Summ(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Суммирование всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(System.Int32[])">
            <summary>
            Суммирование всех элементов массива типа int
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.ComplexVector)">
            <summary>
            Суммирование всех элементов комплексного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.IntegralInterp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            Входной вектор апроксиммирован полиномом 0-го порядка
            с коэфициентом 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            </summary>
            <param name="A">Входной вектор</param>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор
            </summary>
            <param name="A"> Входной вектор</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор
            </summary>
            <param name="A"> Входной вектор</param>   
            <param name="fd"> Sampling frequency</param>
        </member>
        <member name="M:AI.Functions.DiffWithOutF(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор (без первого отсчета)
            </summary>
            <param name="A"> Входной вектор</param>
            <param name="fd"> Sampling frequency</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Вычисляет i-ю производную по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="i">Порядок производной 1, 2, 3 ....</param>
            <returns>Действительный вектор</returns>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Double[])">
            <summary>
            Перемножение всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Multiplication(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Перемножение всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.MultiplicationFunction(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Перемножение всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.PowFunction(System.Double,System.Int32)">
            <summary>
            Возвращает набор степеней данного числа
            </summary>
            <param name="inp">Число</param>
            <param name="pow">максимальная степень</param>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Int32[])">
            <summary>
            Перемножение всех элементов массива типа int
            </summary>
        </member>
        <member name="T:AI.HightLevelFunctions.ActivationFunctions">
            <summary>
            Функции активации нейронов
            </summary>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Sigmoid(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Sigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.InverseSigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.InverseSigmoid(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.SigmoidBiplyar(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Сигмоидальная биполярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Threshold(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Пороговая активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="threshold">Порог</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Threshold(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Ограничение сверху и снизу
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="thresholdUp"></param>
            <param name="thresholdDoun"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Relu(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Релу
            </summary>
            <param name="Inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Relu(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Input</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Relu(AI.DataStructs.Algebraic.Matrix,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="inp">Input</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Sigmoid(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.SigmoidBiplyar(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Threshold(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Sigmoid(AI.DataStructs.Algebraic.Tensor,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="tensor">Input data tensor</param>
            <param name="betta">Коэфициент наклона</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Log10(AI.DataStructs.Algebraic.Tensor)">
            <summary>
            Логарифм по основанию 10
            </summary>
            <param name="tensor">Input data tensor</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Relu(AI.DataStructs.Algebraic.Matrix,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Input</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="M:AI.HightLevelFunctions.ActivationFunctions.Relu(AI.DataStructs.Algebraic.Vector[],System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Input</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="T:AI.HightLevelFunctions.AnalyticGeometryFunctions">
            <summary>
            Аналитическая геометрия
            </summary>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.Cos(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Косинус угла между двумя векторами
            </summary>
            <param name="vector1">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.NormVect(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет эвклидовую норму вектора 
            </summary>
            <param name="vector">Входной вектор</param>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.ScalarProduct(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Скалярное произведение 2-х векторов
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает скалярное произведение</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.ProectionAtoB(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Проекция вектора А на вектор B
            </summary>
            <param name="A">Вектор А</param>
            <param name="B">Вуктор В</param>
            <returns>Результат проецирования</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.AngleVect(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Угол между векторами
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает угол в радианах</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.VectorFromAToB(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет вектор соединяющий точку А с точкой Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает компаненты вектора</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.DistanceFromAToB(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисляет растояние от точки А до Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает растояние</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.AnalyticGeometryFunctions.VectorRotate(AI.DataStructs.Algebraic.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            Поворот вектора на заданные углы
            </summary>
        </member>
        <member name="T:AI.HightLevelFunctions.DistributionFunctions">
            <summary>
            Функции распределения случайной величины
            </summary>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.Gauss(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Функция распределения по нормальному закону 
            </summary>
            <param name="inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.Gauss(AI.DataStructs.Algebraic.Matrix,System.Double,System.Double)">
            <summary>
            Ф-я Гаусса
            </summary>
            <param name="inp"></param>
            <param name="m"></param>
            <param name="std"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.GaussRect(System.Int32,System.Int32,System.Double)">
            <summary>
            Фильтр гаусса
            </summary>
            <param name="h">Высота фильтра</param>
            <param name="w">Ширина</param>
            <param name="std">СКО</param>
            <returns>Фильтр Гаусса</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.Gauss(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="sko">СКО</param>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.Gauss1(AI.DataStructs.Algebraic.Matrix,System.Double,System.Double)">
            <summary>
            Функция Гаусса при x=m -> G(x) = 1
            </summary>
            <param name="inp"></param>
            <param name="m"></param>
            <param name="sko"></param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.GaussNorm1(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.GaussNorm1(AI.DataStructs.Algebraic.Vector,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.HightLevelFunctions.DistributionFunctions.Puasson(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Функция распределения Пуасона 
            </summary>
            <param name="inp">Входной вектор</param>
            <param name="m">Мат. ожидание от 0 до +inf</param>
        </member>
        <member name="T:AI.HightLevelFunctions.FunctionsForEachElements">
            <summary>
            Математические функции для векторов и матриц
            </summary>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Unwrap(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Разворачивание арктангенса
            </summary>
            <param name="data">Данные с ф-ии atan</param>
            <param name="diffMax">Максимальный разрыв</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Pow(System.Double,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Возведение числа в вектор степеней
            </summary>
            <param name="a">Число</param>
            <param name="pow">Вектор степеней</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.PeakDel(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Устранение выбросов на одном отсчете сигнала(пиков)
            </summary>
            <param name="data">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.MinusOnePow(System.Int32)">
            <summary>
            Возведение -1 в степень
            </summary>
            <param name="pow">Степень</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Rad(System.Double,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Параметр</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Rad(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Вектор параметров</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Walsh(System.Double,System.Int32)">
            <summary>
            Функции Уолша
            </summary>
            <param name="x">Параметр</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Walsh(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Вектор параметров</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Erf(System.Double)">
            <summary>
            Loss function
            </summary>
            <param name="x">Аргумент</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Erf(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Функция ошибок
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.GenerateTheSequence(System.Double,System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает последовательность</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.GenerateTheSequence(System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает послеовательность с шагом 1</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.GradToRad(System.Double)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="grad">значение в градусах</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.GradToRad(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="Inp">значения в градусах</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.RadToGrad(System.Double)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="rad">значение в радианах</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.RadToGrad(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="Inp">значение в радианах</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Factorial(System.Int32)">
            <summary>
            Вычисление факториала числа
            </summary>
            <param name="x">Число</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Factorial(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление факториала векторов поэлементно
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sin(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление синусов
            </summary>
            <param name="Inp">Angle vector (in radians)</param>
            <returns>Вектор синусов</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Round(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Rounding
            </summary>
            <param name="Inp">Input data vector</param>
            <param name="digits">до какого знака</param>
            <returns>Output vector</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Cos(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление косинусов
            </summary>
            <param name="Inp">Angle vector (in radians)</param>
            <returns>Вектор косинусов</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Tan(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Calculating tangents
            </summary>
            <param name="Inp">Angle vector (in radians)</param>
            <returns>Вектор тангенсов</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.ctg(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление котангенсов
            </summary>
            <param name="Inp">Angle vector (in radians)</param>
            <returns>Вектор котангенсов</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Asin(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление арксинусов
            </summary>
            <param name="Inp">Вектор синусов</param>
            <returns>Angle vector (in radians)</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Acos(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление арккосинусов
            </summary>
            <param name="Inp">Вектор косинусов</param>
            <returns>Angle vector (in radians)</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Atan(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Вычисление арктангенсов
            </summary>
            <param name="Inp">Вектор тангенсов</param>
            <returns>Angle vector (in radians)</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Log10(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Дсятичный логарифм
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Ln(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Логарифм по основанию "e"
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sec(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Секанс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Cosec(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Косеканс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Exp(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Экспонента e^x
            </summary>
            <param name="Inp">показатели степени</param>
            <returns>e^Inp - поэлементно</returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Tanh(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sign(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Определение знака
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sqrt(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">числа</param>		
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sin(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Вычисление синуса
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Exp(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            e^x
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Tanh(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Cos(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Косинус
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Tan(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Тангенс
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Ctan(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Котангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Asin(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Арксинус
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Acos(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Арккосинус
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Atan(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Арктангенс
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Abs(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Модуль
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sqrt(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Квадратный корень
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Log10(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Десятичный логарифм
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Ln(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Логарифм по основанию E
            </summary>
            <param name="inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Sec(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Секонс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Cosec(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Косеконс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.HightLevelFunctions.FunctionsForEachElements.Abs(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="T:AI.Statistics.FormStatistcs">
            <summary>
            Статистики зависимые только от формы функции
            </summary>
        </member>
        <member name="M:AI.Statistics.FormStatistcs.CrestFactor(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Коэффициент формы (пик-фактор)
            </summary>
            <param name="vector">Input data vector</param>
        </member>
        <member name="T:AI.Statistics.Histogramm">
            <summary>
            Структура гистограммы
            </summary>
        </member>
        <member name="M:AI.Statistics.Histogramm.#ctor">
            <summary>
             Структура гистограммы
            </summary>
        </member>
        <member name="M:AI.Statistics.Histogramm.#ctor(System.Int32)">
            <summary>
             Структура гистограммы
            </summary>
            <param name="n">Число разрядов</param>
        </member>
        <member name="P:AI.Statistics.Histogramm.X">
            <summary>
            Значения столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Y">
            <summary>
            Высоты столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Name">
            <summary>
            Название гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Info">
            <summary>
            Описание гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.XLable">
            <summary>
            Название оси "Х" гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.YLables">
            <summary>
            Название оси "У" гистограммы
            </summary>
        </member>
        <member name="M:AI.Statistics.Histogramm.Save(System.String)">
            <summary>
            Сохранение гистограммы
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueH(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Сумма значений по строкам
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueHMean(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Средние знач. яркости
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueW(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Сумма значений по строкам
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueWMean(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Средние знач. яркости
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarAnd(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Получение характеристики яркости на базе умножения(Эквивалент "И")
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarSumm(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Получение характеристики яркости на базе сложения
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarNorm(AI.DataStructs.Algebraic.Matrix)">
            <summary>
            Получение характеристики яркости на базе вычисления модуля
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.Open(System.String)">
            <summary>
            Загрузка гистограммы
            </summary>
            <param name="path">File path</param>		
        </member>
        <member name="T:AI.Statistics.Quantile">
            <summary>
            Quantiles
            </summary>
        </member>
        <member name="P:AI.Statistics.Quantile.SortVec">
            <summary>
            Sorted vector
            </summary>
        </member>
        <member name="M:AI.Statistics.Quantile.#ctor(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Quantile
            </summary>
            <param name="structureDouble">Data</param>
        </member>
        <member name="M:AI.Statistics.Quantile.GetQuantile(System.Double)">
            <summary>
            Calculating a given quantile (0-1)
            </summary>
            <param name="q">Quantile</param>
        </member>
        <member name="T:AI.Statistics.RandomItemSelection`1">
            <summary>
            Random selection of items
            </summary>
            <typeparam name="T">Array type</typeparam>
        </member>
        <member name="M:AI.Statistics.RandomItemSelection`1.GetElement(AI.DataStructs.Algebraic.Vector,`0[],System.Random)">
            <summary>
            Random selection of elements with a given distribution function
            </summary>
            <param name="distributionFunction">Samples of a discrete distribution function</param>
            <param name="arrayStates">Array of states</param>
            <param name="random">Random number generator</param>
        </member>
        <member name="M:AI.Statistics.RandomItemSelection`1.GetIndex(AI.DataStructs.Algebraic.Vector,System.Random)">
            <summary>
            Random selection of index with a given distribution function
            </summary>
            <param name="distributionFunction">Samples of a discrete distribution function</param>
            <param name="random">Random number generator</param>
        </member>
        <member name="T:AI.Statistics.Statistic">
            <summary>
            The class contains methods for statistical analysis.As well as pseudo random number generators
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.STD">
            <summary>
            Root mean square deviation
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MinValue">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MaxValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Variance">
            <summary>
            Dispersion
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Expected">
            <summary>
            Expected value
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.#ctor(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Creates an object of class Statistic, takes a vector of input values ​​of a random variable
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32)">
            <summary>
            Pseudo-random number generator с равномерным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32,System.Random)">
            <summary>
            Pseudo-random number generator с равномерным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="random">Pseudo-random number generator</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Gauss(System.Random)">
            <summary>
            Гауссовское распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Gauss2(System.Random,System.Int32)">
            <summary>
            Гауссовское распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNormP(System.Int32,System.Int32)">
            <summary>
            Pseudo-random number generator с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="iter">Число итераций</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNormP(System.Int32,System.Random,System.Int32)">
            <summary>
            Pseudo-random number generator с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="random">Pseudo-random number generator</param>
            <param name="iter">Число итераций</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32)">
            <summary>
            Pseudo-random number generator с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32,System.Random)">
            <summary>
            Pseudo-random number generator с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="rnd">Pseudo-random number generator</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32,System.Int32,System.Random)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32,System.Int32,System.Int32)">
            <summary>
            Тензор
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Тензор
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32,System.Int32,System.Int32)">
            <summary>
            Тензор
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32,System.Int32,System.Random)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
            <param name="rn">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Тензор
            </summary>
            <param name="h"> Height </param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <param name="random">Pseudo-random number generator</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaximalValue(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Maximum value
            </summary>
            <param name="data">Values</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MinimalValue(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Minimum value
            </summary>
            <param name="data">Values</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue">
            <summary>
            Expected value
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Estimation of mathematical expectation
            </summary>
            <param name="vector">Vector containing samples of a random variable</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValueAbs(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Estimation of the mathematical expectation from the modulus of a random variable
            </summary>
            <param name="vector">Vector containing samples of a random variable</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValueNotCheckNaN(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Estimation of mathematical expectation
            </summary>
            <param name="vector">Vector containing samples of a random variable</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValueAbsNotCheckNaN(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Estimation of the mathematical expectation from the modulus of a random variable
            </summary>
            <param name="vector">Vector containing samples of a random variable</param>
        </member>
        <member name="M:AI.Statistics.Statistic.СalcVariance">
            <summary>
            Variance calculation
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.СalcVariance(AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Variance calculation
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.CalcStd(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Calculating standard deviation
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm">
            <summary>
            Pseudo-random number generator с нормальным распределением
            </summary>
            <returns>Возвращает случайные числа</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.Rand(System.Int16)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.RandNorm(System.Int16)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Histogramm(System.Int32)">
            <summary>
            Строит гистограмму
            </summary>
            <param name="n">Количество разрядов гистограммы</param>
            <returns>возращает вектор длинной nRazr, содержащий отсчеты для построения гистограммы</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.InitialMoment(System.Int32)">
            <summary>
            Initial moment
            </summary>
            <param name="n">Initial moment number 1,2,3 ...</param>
        </member>
        <member name="M:AI.Statistics.Statistic.CentralMoment(System.Int32)">
            <summary>
            Central moment
            </summary>
            <param name="n">Central moment number 1,2,3 ...</param>
        </member>
        <member name="M:AI.Statistics.Statistic.Asymmetry">
            <summary>
            Distribution asymmetry
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Excess">
            <summary>
            Kurtosis, "steepness" of the distribution
            </summary>
            <returns>Returns the kurtosis coefficient</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Cov(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Covariance (correlation moment, linear dependence) of two vectors
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.CorrelationCoefficient(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Pearson's correlation coefficient
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.CorrelationCoefficient(AI.DataStructs.Algebraic.IAlgebraicStructure,AI.DataStructs.Algebraic.IAlgebraicStructure)">
            <summary>
            Pearson's correlation coefficient
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanVector(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Усреднение по выборке(ансамблю)
            </summary>
            <param name="vectors">Dataset</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGeom(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Среднее геометрическое 
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGarmonic(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Среднее гармоническое
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RMS(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Среднeквадратичное значение
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.EnsembleDispersion(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Дисперсия по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.EnsembleStd(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            СКО по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEns(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Максимум по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEnergeVector(AI.DataStructs.Algebraic.Vector[])">
            <summary>
            Возвращает вектор с максимальной энергией
            </summary>
            <param name="ens">Ансамбль векторов</param>
            <returns>Вектор с максимальной энергией</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.SimpleMeanFreq(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Средняя частота (не нормированная, зависит от кол-ва точек)
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanFreq(AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Средняя частота сигнала
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Sampling frequency</param>
            <returns>Средняя частота [Гц]</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.DivFreq(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Изменение частоты
            </summary>
            <param name="signal">Сигнал</param>
            <returns>Дивиация средней частоты</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanStep(AI.DataStructs.Algebraic.Vector)">
            <summary>
            Average step, how much x[i] differs from x[i + 1] on average
            </summary>
            <param name="vector">Sequence</param>
        </member>
        <member name="T:AI.Convolution">
            <summary>
            A class that implements the folding of sequences
            </summary>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Convolution
            </summary>
            <param name="signal">Signal</param>
            <param name="Ht">Impulse response</param>
        </member>
        <member name="M:AI.Convolution.ConvolutionNormal(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector)">
            <summary>
            Convolution
            </summary>
            <param name="signal">Signal</param>
            <param name="Ht">Impulse response</param>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.DataStructs.Algebraic.Vector,AI.DataStructs.Algebraic.Vector,System.Double)">
            <summary>
            Convolution
            </summary>
            <param name="signal">Signal</param>
            <param name="ht">Impulse response</param>
            <param name="fd">Sampling frequency</param>
        </member>
        <member name="M:AI.Convolution.StWithHt(AI.DataStructs.Algebraic.Vector,System.Int32)">
            <summary>
            Creating a new signal reference vector
            </summary>
            <param name="st">Signal</param>
            <param name="htLen">Impulse response length</param>
        </member>
        <member name="M:AI.Convolution.StWithHt(AI.ComplexVector,System.Int32)">
            <summary>
            Creating a new signal reference vector
            </summary>
            <param name="st">Signal</param>
            <param name="htLen">Impulse response length</param>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Direct convolution complex vector
            </summary>
        </member>
    </members>
</doc>
